
HMI0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  000031ec  00003280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800124  00800124  00003344  2**0
                  ALLOC
  3 .stab         00002ec8  00000000  00000000  00003344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a9  00000000  00000000  0000620c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000073b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007665  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000092ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a199  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b335  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
      8a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e0       	ldi	r26, 0x0E	; 14
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Step1_Create_System_Password>:
uint8 g_commandRececived=0;
uint8 g_ticks=0;

/*this function for first step*/
void Step1_Create_System_Password()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	ea 97       	sbiw	r28, 0x3a	; 58
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	/*The LCD should display “Please Enter Password” like that: */
	LCD_clearScreen();
     b5e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	LCD_displayString(" Plz Enter Pass:");
     b6a:	80 e6       	ldi	r24, 0x60	; 96
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
	LCD_moveCursor(1,0);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	/*Enter a password consists of 5 numbers, Display * in the screen for each number.*/
	for(uint8 i=0;i<MAX_DIGITS;i++)
     b7a:	1a ae       	std	Y+58, r1	; 0x3a
     b7c:	81 c0       	rjmp	.+258    	; 0xc80 <Step1_Create_System_Password+0x13a>
	{
		password[i]=KEYPAD_getPressedKey();
     b7e:	8a ad       	ldd	r24, Y+58	; 0x3a
     b80:	08 2f       	mov	r16, r24
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <KEYPAD_getPressedKey>
     b88:	f8 01       	movw	r30, r16
     b8a:	ec 5d       	subi	r30, 0xDC	; 220
     b8c:	fe 4f       	sbci	r31, 0xFE	; 254
     b8e:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     b90:	8a e2       	ldi	r24, 0x2A	; 42
     b92:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_displayCharacter>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a6 e9       	ldi	r26, 0x96	; 150
     b9c:	b3 e4       	ldi	r27, 0x43	; 67
     b9e:	8d ab       	std	Y+53, r24	; 0x35
     ba0:	9e ab       	std	Y+54, r25	; 0x36
     ba2:	af ab       	std	Y+55, r26	; 0x37
     ba4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	6d a9       	ldd	r22, Y+53	; 0x35
     ba8:	7e a9       	ldd	r23, Y+54	; 0x36
     baa:	8f a9       	ldd	r24, Y+55	; 0x37
     bac:	98 ad       	ldd	r25, Y+56	; 0x38
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a ef       	ldi	r20, 0xFA	; 250
     bb4:	54 e4       	ldi	r21, 0x44	; 68
     bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	89 ab       	std	Y+49, r24	; 0x31
     bc0:	9a ab       	std	Y+50, r25	; 0x32
     bc2:	ab ab       	std	Y+51, r26	; 0x33
     bc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bc6:	69 a9       	ldd	r22, Y+49	; 0x31
     bc8:	7a a9       	ldd	r23, Y+50	; 0x32
     bca:	8b a9       	ldd	r24, Y+51	; 0x33
     bcc:	9c a9       	ldd	r25, Y+52	; 0x34
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <Step1_Create_System_Password+0xa2>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	98 ab       	std	Y+48, r25	; 0x30
     be4:	8f a7       	std	Y+47, r24	; 0x2f
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <Step1_Create_System_Password+0x120>
	else if (__tmp > 65535)
     be8:	69 a9       	ldd	r22, Y+49	; 0x31
     bea:	7a a9       	ldd	r23, Y+50	; 0x32
     bec:	8b a9       	ldd	r24, Y+51	; 0x33
     bee:	9c a9       	ldd	r25, Y+52	; 0x34
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <Step1_Create_System_Password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	6d a9       	ldd	r22, Y+53	; 0x35
     c02:	7e a9       	ldd	r23, Y+54	; 0x36
     c04:	8f a9       	ldd	r24, Y+55	; 0x37
     c06:	98 ad       	ldd	r25, Y+56	; 0x38
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	98 ab       	std	Y+48, r25	; 0x30
     c26:	8f a7       	std	Y+47, r24	; 0x2f
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <Step1_Create_System_Password+0x102>
     c2a:	88 ec       	ldi	r24, 0xC8	; 200
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9e a7       	std	Y+46, r25	; 0x2e
     c30:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c32:	8d a5       	ldd	r24, Y+45	; 0x2d
     c34:	9e a5       	ldd	r25, Y+46	; 0x2e
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <Step1_Create_System_Password+0xf0>
     c3a:	9e a7       	std	Y+46, r25	; 0x2e
     c3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c40:	98 a9       	ldd	r25, Y+48	; 0x30
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	98 ab       	std	Y+48, r25	; 0x30
     c46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4a:	98 a9       	ldd	r25, Y+48	; 0x30
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	69 f7       	brne	.-38     	; 0xc2a <Step1_Create_System_Password+0xe4>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <Step1_Create_System_Password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	69 a9       	ldd	r22, Y+49	; 0x31
     c54:	7a a9       	ldd	r23, Y+50	; 0x32
     c56:	8b a9       	ldd	r24, Y+51	; 0x33
     c58:	9c a9       	ldd	r25, Y+52	; 0x34
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	98 ab       	std	Y+48, r25	; 0x30
     c64:	8f a7       	std	Y+47, r24	; 0x2f
     c66:	8f a5       	ldd	r24, Y+47	; 0x2f
     c68:	98 a9       	ldd	r25, Y+48	; 0x30
     c6a:	9c a7       	std	Y+44, r25	; 0x2c
     c6c:	8b a7       	std	Y+43, r24	; 0x2b
     c6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c70:	9c a5       	ldd	r25, Y+44	; 0x2c
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <Step1_Create_System_Password+0x12c>
     c76:	9c a7       	std	Y+44, r25	; 0x2c
     c78:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString(" Plz Enter Pass:");
	LCD_moveCursor(1,0);
	/*Enter a password consists of 5 numbers, Display * in the screen for each number.*/
	for(uint8 i=0;i<MAX_DIGITS;i++)
     c7a:	8a ad       	ldd	r24, Y+58	; 0x3a
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	8a af       	std	Y+58, r24	; 0x3a
     c80:	8a ad       	ldd	r24, Y+58	; 0x3a
     c82:	85 30       	cpi	r24, 0x05	; 5
     c84:	08 f4       	brcc	.+2      	; 0xc88 <Step1_Create_System_Password+0x142>
     c86:	7b cf       	rjmp	.-266    	; 0xb7e <Step1_Create_System_Password+0x38>
		password[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	/*wait for Press enter button*/
	KEYPAD_getPressedKey();
     c88:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <KEYPAD_getPressedKey>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a6 e9       	ldi	r26, 0x96	; 150
     c92:	b3 e4       	ldi	r27, 0x43	; 67
     c94:	8f a3       	std	Y+39, r24	; 0x27
     c96:	98 a7       	std	Y+40, r25	; 0x28
     c98:	a9 a7       	std	Y+41, r26	; 0x29
     c9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c9c:	6f a1       	ldd	r22, Y+39	; 0x27
     c9e:	78 a5       	ldd	r23, Y+40	; 0x28
     ca0:	89 a5       	ldd	r24, Y+41	; 0x29
     ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a ef       	ldi	r20, 0xFA	; 250
     caa:	54 e4       	ldi	r21, 0x44	; 68
     cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	8b a3       	std	Y+35, r24	; 0x23
     cb6:	9c a3       	std	Y+36, r25	; 0x24
     cb8:	ad a3       	std	Y+37, r26	; 0x25
     cba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cbc:	6b a1       	ldd	r22, Y+35	; 0x23
     cbe:	7c a1       	ldd	r23, Y+36	; 0x24
     cc0:	8d a1       	ldd	r24, Y+37	; 0x25
     cc2:	9e a1       	ldd	r25, Y+38	; 0x26
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	2c f4       	brge	.+10     	; 0xcde <Step1_Create_System_Password+0x198>
		__ticks = 1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9a a3       	std	Y+34, r25	; 0x22
     cda:	89 a3       	std	Y+33, r24	; 0x21
     cdc:	3f c0       	rjmp	.+126    	; 0xd5c <Step1_Create_System_Password+0x216>
	else if (__tmp > 65535)
     cde:	6b a1       	ldd	r22, Y+35	; 0x23
     ce0:	7c a1       	ldd	r23, Y+36	; 0x24
     ce2:	8d a1       	ldd	r24, Y+37	; 0x25
     ce4:	9e a1       	ldd	r25, Y+38	; 0x26
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	57 e4       	ldi	r21, 0x47	; 71
     cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf2:	18 16       	cp	r1, r24
     cf4:	4c f5       	brge	.+82     	; 0xd48 <Step1_Create_System_Password+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf6:	6f a1       	ldd	r22, Y+39	; 0x27
     cf8:	78 a5       	ldd	r23, Y+40	; 0x28
     cfa:	89 a5       	ldd	r24, Y+41	; 0x29
     cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9a a3       	std	Y+34, r25	; 0x22
     d1c:	89 a3       	std	Y+33, r24	; 0x21
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <Step1_Create_System_Password+0x1f8>
     d20:	88 ec       	ldi	r24, 0xC8	; 200
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	98 a3       	std	Y+32, r25	; 0x20
     d26:	8f 8f       	std	Y+31, r24	; 0x1f
     d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d2a:	98 a1       	ldd	r25, Y+32	; 0x20
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <Step1_Create_System_Password+0x1e6>
     d30:	98 a3       	std	Y+32, r25	; 0x20
     d32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d34:	89 a1       	ldd	r24, Y+33	; 0x21
     d36:	9a a1       	ldd	r25, Y+34	; 0x22
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	9a a3       	std	Y+34, r25	; 0x22
     d3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3e:	89 a1       	ldd	r24, Y+33	; 0x21
     d40:	9a a1       	ldd	r25, Y+34	; 0x22
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	69 f7       	brne	.-38     	; 0xd20 <Step1_Create_System_Password+0x1da>
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <Step1_Create_System_Password+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d48:	6b a1       	ldd	r22, Y+35	; 0x23
     d4a:	7c a1       	ldd	r23, Y+36	; 0x24
     d4c:	8d a1       	ldd	r24, Y+37	; 0x25
     d4e:	9e a1       	ldd	r25, Y+38	; 0x26
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9a a3       	std	Y+34, r25	; 0x22
     d5a:	89 a3       	std	Y+33, r24	; 0x21
     d5c:	89 a1       	ldd	r24, Y+33	; 0x21
     d5e:	9a a1       	ldd	r25, Y+34	; 0x22
     d60:	9e 8f       	std	Y+30, r25	; 0x1e
     d62:	8d 8f       	std	Y+29, r24	; 0x1d
     d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d66:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <Step1_Create_System_Password+0x222>
     d6c:	9e 8f       	std	Y+30, r25	; 0x1e
     d6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	/*Ask the user to renter the same password for confirmation by display this message "Please re-enter the same Pass":*/
	LCD_clearScreen();
     d70:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	LCD_displayString("Plz Re-enter The");
     d7c:	81 e7       	ldi	r24, 0x71	; 113
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
	LCD_moveCursor(1,0);
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	LCD_displayString("Same Pass: ");
     d8c:	82 e8       	ldi	r24, 0x82	; 130
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
	/*Enter a password consists of 5 numbers, Display * in the screen for each number. */
	for(uint8 i=0;i<MAX_DIGITS;i++)
     d94:	19 ae       	std	Y+57, r1	; 0x39
     d96:	81 c0       	rjmp	.+258    	; 0xe9a <Step1_Create_System_Password+0x354>
	{
		password_check[i]=KEYPAD_getPressedKey();
     d98:	89 ad       	ldd	r24, Y+57	; 0x39
     d9a:	08 2f       	mov	r16, r24
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <KEYPAD_getPressedKey>
     da2:	f8 01       	movw	r30, r16
     da4:	e7 5d       	subi	r30, 0xD7	; 215
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     daa:	8a e2       	ldi	r24, 0x2A	; 42
     dac:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_displayCharacter>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a6 e9       	ldi	r26, 0x96	; 150
     db6:	b3 e4       	ldi	r27, 0x43	; 67
     db8:	89 8f       	std	Y+25, r24	; 0x19
     dba:	9a 8f       	std	Y+26, r25	; 0x1a
     dbc:	ab 8f       	std	Y+27, r26	; 0x1b
     dbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc0:	69 8d       	ldd	r22, Y+25	; 0x19
     dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	4a ef       	ldi	r20, 0xFA	; 250
     dce:	54 e4       	ldi	r21, 0x44	; 68
     dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	8d 8b       	std	Y+21, r24	; 0x15
     dda:	9e 8b       	std	Y+22, r25	; 0x16
     ddc:	af 8b       	std	Y+23, r26	; 0x17
     dde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     de0:	6d 89       	ldd	r22, Y+21	; 0x15
     de2:	7e 89       	ldd	r23, Y+22	; 0x16
     de4:	8f 89       	ldd	r24, Y+23	; 0x17
     de6:	98 8d       	ldd	r25, Y+24	; 0x18
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e8       	ldi	r20, 0x80	; 128
     dee:	5f e3       	ldi	r21, 0x3F	; 63
     df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df4:	88 23       	and	r24, r24
     df6:	2c f4       	brge	.+10     	; 0xe02 <Step1_Create_System_Password+0x2bc>
		__ticks = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9c 8b       	std	Y+20, r25	; 0x14
     dfe:	8b 8b       	std	Y+19, r24	; 0x13
     e00:	3f c0       	rjmp	.+126    	; 0xe80 <Step1_Create_System_Password+0x33a>
	else if (__tmp > 65535)
     e02:	6d 89       	ldd	r22, Y+21	; 0x15
     e04:	7e 89       	ldd	r23, Y+22	; 0x16
     e06:	8f 89       	ldd	r24, Y+23	; 0x17
     e08:	98 8d       	ldd	r25, Y+24	; 0x18
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e16:	18 16       	cp	r1, r24
     e18:	4c f5       	brge	.+82     	; 0xe6c <Step1_Create_System_Password+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1a:	69 8d       	ldd	r22, Y+25	; 0x19
     e1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e2       	ldi	r20, 0x20	; 32
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9c 8b       	std	Y+20, r25	; 0x14
     e40:	8b 8b       	std	Y+19, r24	; 0x13
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <Step1_Create_System_Password+0x31c>
     e44:	88 ec       	ldi	r24, 0xC8	; 200
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9a 8b       	std	Y+18, r25	; 0x12
     e4a:	89 8b       	std	Y+17, r24	; 0x11
     e4c:	89 89       	ldd	r24, Y+17	; 0x11
     e4e:	9a 89       	ldd	r25, Y+18	; 0x12
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <Step1_Create_System_Password+0x30a>
     e54:	9a 8b       	std	Y+18, r25	; 0x12
     e56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	8b 89       	ldd	r24, Y+19	; 0x13
     e5a:	9c 89       	ldd	r25, Y+20	; 0x14
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9c 8b       	std	Y+20, r25	; 0x14
     e60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	8b 89       	ldd	r24, Y+19	; 0x13
     e64:	9c 89       	ldd	r25, Y+20	; 0x14
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f7       	brne	.-38     	; 0xe44 <Step1_Create_System_Password+0x2fe>
     e6a:	14 c0       	rjmp	.+40     	; 0xe94 <Step1_Create_System_Password+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	6d 89       	ldd	r22, Y+21	; 0x15
     e6e:	7e 89       	ldd	r23, Y+22	; 0x16
     e70:	8f 89       	ldd	r24, Y+23	; 0x17
     e72:	98 8d       	ldd	r25, Y+24	; 0x18
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9c 8b       	std	Y+20, r25	; 0x14
     e7e:	8b 8b       	std	Y+19, r24	; 0x13
     e80:	8b 89       	ldd	r24, Y+19	; 0x13
     e82:	9c 89       	ldd	r25, Y+20	; 0x14
     e84:	98 8b       	std	Y+16, r25	; 0x10
     e86:	8f 87       	std	Y+15, r24	; 0x0f
     e88:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8a:	98 89       	ldd	r25, Y+16	; 0x10
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <Step1_Create_System_Password+0x346>
     e90:	98 8b       	std	Y+16, r25	; 0x10
     e92:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_moveCursor(0,0);
	LCD_displayString("Plz Re-enter The");
	LCD_moveCursor(1,0);
	LCD_displayString("Same Pass: ");
	/*Enter a password consists of 5 numbers, Display * in the screen for each number. */
	for(uint8 i=0;i<MAX_DIGITS;i++)
     e94:	89 ad       	ldd	r24, Y+57	; 0x39
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	89 af       	std	Y+57, r24	; 0x39
     e9a:	89 ad       	ldd	r24, Y+57	; 0x39
     e9c:	85 30       	cpi	r24, 0x05	; 5
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <Step1_Create_System_Password+0x35c>
     ea0:	7b cf       	rjmp	.-266    	; 0xd98 <Step1_Create_System_Password+0x252>
		password_check[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	/*wait for Press enter button*/
	KEYPAD_getPressedKey();
     ea2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <KEYPAD_getPressedKey>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a6 e9       	ldi	r26, 0x96	; 150
     eac:	b3 e4       	ldi	r27, 0x43	; 67
     eae:	8b 87       	std	Y+11, r24	; 0x0b
     eb0:	9c 87       	std	Y+12, r25	; 0x0c
     eb2:	ad 87       	std	Y+13, r26	; 0x0d
     eb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	4a ef       	ldi	r20, 0xFA	; 250
     ec4:	54 e4       	ldi	r21, 0x44	; 68
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8f 83       	std	Y+7, r24	; 0x07
     ed0:	98 87       	std	Y+8, r25	; 0x08
     ed2:	a9 87       	std	Y+9, r26	; 0x09
     ed4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	5f e3       	ldi	r21, 0x3F	; 63
     ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eea:	88 23       	and	r24, r24
     eec:	2c f4       	brge	.+10     	; 0xef8 <Step1_Create_System_Password+0x3b2>
		__ticks = 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9e 83       	std	Y+6, r25	; 0x06
     ef4:	8d 83       	std	Y+5, r24	; 0x05
     ef6:	3f c0       	rjmp	.+126    	; 0xf76 <Step1_Create_System_Password+0x430>
	else if (__tmp > 65535)
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	3f ef       	ldi	r19, 0xFF	; 255
     f04:	4f e7       	ldi	r20, 0x7F	; 127
     f06:	57 e4       	ldi	r21, 0x47	; 71
     f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0c:	18 16       	cp	r1, r24
     f0e:	4c f5       	brge	.+82     	; 0xf62 <Step1_Create_System_Password+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f10:	6b 85       	ldd	r22, Y+11	; 0x0b
     f12:	7c 85       	ldd	r23, Y+12	; 0x0c
     f14:	8d 85       	ldd	r24, Y+13	; 0x0d
     f16:	9e 85       	ldd	r25, Y+14	; 0x0e
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e2       	ldi	r20, 0x20	; 32
     f1e:	51 e4       	ldi	r21, 0x41	; 65
     f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <Step1_Create_System_Password+0x412>
     f3a:	88 ec       	ldi	r24, 0xC8	; 200
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9c 83       	std	Y+4, r25	; 0x04
     f40:	8b 83       	std	Y+3, r24	; 0x03
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <Step1_Create_System_Password+0x400>
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	69 f7       	brne	.-38     	; 0xf3a <Step1_Create_System_Password+0x3f4>
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <Step1_Create_System_Password+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f62:	6f 81       	ldd	r22, Y+7	; 0x07
     f64:	78 85       	ldd	r23, Y+8	; 0x08
     f66:	89 85       	ldd	r24, Y+9	; 0x09
     f68:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <Step1_Create_System_Password+0x43c>
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

}
     f8a:	ea 96       	adiw	r28, 0x3a	; 58
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <Step2_Main_Options>:

/* function to display options Open the Door or Change Pass*/
void Step2_Main_Options(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     fa8:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	LCD_displayString(" + : Open Door");
     fb4:	8e e8       	ldi	r24, 0x8E	; 142
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
	LCD_moveCursor(1,0);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	LCD_displayString(" - : Change Pass ");
     fc4:	8d e9       	ldi	r24, 0x9D	; 157
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <takePasswordFromUser>:

/*function to display enter password in lcd and take password from user*/
void takePasswordFromUser(void)

{
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	6d 97       	sbiw	r28, 0x1d	; 29
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
	/*The LCD should display “Please Enter Password” like that: */
	LCD_clearScreen();
     fea:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	LCD_displayString(" Plz Enter Pass:");
     ff6:	80 e6       	ldi	r24, 0x60	; 96
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
	LCD_moveCursor(1,0);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	/*Enter a password consists of 5 numbers, Display * in the screen for each number.*/
	for(uint8 i=0;i<MAX_DIGITS;i++)
    1006:	1d 8e       	std	Y+29, r1	; 0x1d
    1008:	81 c0       	rjmp	.+258    	; 0x110c <takePasswordFromUser+0x13a>
	{
		password[i]=KEYPAD_getPressedKey();
    100a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    100c:	08 2f       	mov	r16, r24
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <KEYPAD_getPressedKey>
    1014:	f8 01       	movw	r30, r16
    1016:	ec 5d       	subi	r30, 0xDC	; 220
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    101c:	8a e2       	ldi	r24, 0x2A	; 42
    101e:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_displayCharacter>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a6 e9       	ldi	r26, 0x96	; 150
    1028:	b3 e4       	ldi	r27, 0x43	; 67
    102a:	89 8f       	std	Y+25, r24	; 0x19
    102c:	9a 8f       	std	Y+26, r25	; 0x1a
    102e:	ab 8f       	std	Y+27, r26	; 0x1b
    1030:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1032:	69 8d       	ldd	r22, Y+25	; 0x19
    1034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4a ef       	ldi	r20, 0xFA	; 250
    1040:	54 e4       	ldi	r21, 0x44	; 68
    1042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	8d 8b       	std	Y+21, r24	; 0x15
    104c:	9e 8b       	std	Y+22, r25	; 0x16
    104e:	af 8b       	std	Y+23, r26	; 0x17
    1050:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1052:	6d 89       	ldd	r22, Y+21	; 0x15
    1054:	7e 89       	ldd	r23, Y+22	; 0x16
    1056:	8f 89       	ldd	r24, Y+23	; 0x17
    1058:	98 8d       	ldd	r25, Y+24	; 0x18
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e8       	ldi	r20, 0x80	; 128
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1066:	88 23       	and	r24, r24
    1068:	2c f4       	brge	.+10     	; 0x1074 <takePasswordFromUser+0xa2>
		__ticks = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9c 8b       	std	Y+20, r25	; 0x14
    1070:	8b 8b       	std	Y+19, r24	; 0x13
    1072:	3f c0       	rjmp	.+126    	; 0x10f2 <takePasswordFromUser+0x120>
	else if (__tmp > 65535)
    1074:	6d 89       	ldd	r22, Y+21	; 0x15
    1076:	7e 89       	ldd	r23, Y+22	; 0x16
    1078:	8f 89       	ldd	r24, Y+23	; 0x17
    107a:	98 8d       	ldd	r25, Y+24	; 0x18
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	3f ef       	ldi	r19, 0xFF	; 255
    1080:	4f e7       	ldi	r20, 0x7F	; 127
    1082:	57 e4       	ldi	r21, 0x47	; 71
    1084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1088:	18 16       	cp	r1, r24
    108a:	4c f5       	brge	.+82     	; 0x10de <takePasswordFromUser+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108c:	69 8d       	ldd	r22, Y+25	; 0x19
    108e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	51 e4       	ldi	r21, 0x41	; 65
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9c 8b       	std	Y+20, r25	; 0x14
    10b2:	8b 8b       	std	Y+19, r24	; 0x13
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <takePasswordFromUser+0x102>
    10b6:	88 ec       	ldi	r24, 0xC8	; 200
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9a 8b       	std	Y+18, r25	; 0x12
    10bc:	89 8b       	std	Y+17, r24	; 0x11
    10be:	89 89       	ldd	r24, Y+17	; 0x11
    10c0:	9a 89       	ldd	r25, Y+18	; 0x12
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <takePasswordFromUser+0xf0>
    10c6:	9a 8b       	std	Y+18, r25	; 0x12
    10c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	8b 89       	ldd	r24, Y+19	; 0x13
    10cc:	9c 89       	ldd	r25, Y+20	; 0x14
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	9c 8b       	std	Y+20, r25	; 0x14
    10d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d4:	8b 89       	ldd	r24, Y+19	; 0x13
    10d6:	9c 89       	ldd	r25, Y+20	; 0x14
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	69 f7       	brne	.-38     	; 0x10b6 <takePasswordFromUser+0xe4>
    10dc:	14 c0       	rjmp	.+40     	; 0x1106 <takePasswordFromUser+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10de:	6d 89       	ldd	r22, Y+21	; 0x15
    10e0:	7e 89       	ldd	r23, Y+22	; 0x16
    10e2:	8f 89       	ldd	r24, Y+23	; 0x17
    10e4:	98 8d       	ldd	r25, Y+24	; 0x18
    10e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	9c 8b       	std	Y+20, r25	; 0x14
    10f0:	8b 8b       	std	Y+19, r24	; 0x13
    10f2:	8b 89       	ldd	r24, Y+19	; 0x13
    10f4:	9c 89       	ldd	r25, Y+20	; 0x14
    10f6:	98 8b       	std	Y+16, r25	; 0x10
    10f8:	8f 87       	std	Y+15, r24	; 0x0f
    10fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fc:	98 89       	ldd	r25, Y+16	; 0x10
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <takePasswordFromUser+0x12c>
    1102:	98 8b       	std	Y+16, r25	; 0x10
    1104:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString(" Plz Enter Pass:");
	LCD_moveCursor(1,0);
	/*Enter a password consists of 5 numbers, Display * in the screen for each number.*/
	for(uint8 i=0;i<MAX_DIGITS;i++)
    1106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	8d 8f       	std	Y+29, r24	; 0x1d
    110c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110e:	85 30       	cpi	r24, 0x05	; 5
    1110:	08 f4       	brcc	.+2      	; 0x1114 <takePasswordFromUser+0x142>
    1112:	7b cf       	rjmp	.-266    	; 0x100a <takePasswordFromUser+0x38>
		password[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	/*wait for Press enter button*/
	KEYPAD_getPressedKey();
    1114:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <KEYPAD_getPressedKey>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a6 e9       	ldi	r26, 0x96	; 150
    111e:	b3 e4       	ldi	r27, 0x43	; 67
    1120:	8b 87       	std	Y+11, r24	; 0x0b
    1122:	9c 87       	std	Y+12, r25	; 0x0c
    1124:	ad 87       	std	Y+13, r26	; 0x0d
    1126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	4a ef       	ldi	r20, 0xFA	; 250
    1136:	54 e4       	ldi	r21, 0x44	; 68
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8f 83       	std	Y+7, r24	; 0x07
    1142:	98 87       	std	Y+8, r25	; 0x08
    1144:	a9 87       	std	Y+9, r26	; 0x09
    1146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1148:	6f 81       	ldd	r22, Y+7	; 0x07
    114a:	78 85       	ldd	r23, Y+8	; 0x08
    114c:	89 85       	ldd	r24, Y+9	; 0x09
    114e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	5f e3       	ldi	r21, 0x3F	; 63
    1158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115c:	88 23       	and	r24, r24
    115e:	2c f4       	brge	.+10     	; 0x116a <takePasswordFromUser+0x198>
		__ticks = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <takePasswordFromUser+0x216>
	else if (__tmp > 65535)
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	3f ef       	ldi	r19, 0xFF	; 255
    1176:	4f e7       	ldi	r20, 0x7F	; 127
    1178:	57 e4       	ldi	r21, 0x47	; 71
    117a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    117e:	18 16       	cp	r1, r24
    1180:	4c f5       	brge	.+82     	; 0x11d4 <takePasswordFromUser+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1182:	6b 85       	ldd	r22, Y+11	; 0x0b
    1184:	7c 85       	ldd	r23, Y+12	; 0x0c
    1186:	8d 85       	ldd	r24, Y+13	; 0x0d
    1188:	9e 85       	ldd	r25, Y+14	; 0x0e
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e2       	ldi	r20, 0x20	; 32
    1190:	51 e4       	ldi	r21, 0x41	; 65
    1192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <takePasswordFromUser+0x1f8>
    11ac:	88 ec       	ldi	r24, 0xC8	; 200
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <takePasswordFromUser+0x1e6>
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	69 f7       	brne	.-38     	; 0x11ac <takePasswordFromUser+0x1da>
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <takePasswordFromUser+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d4:	6f 81       	ldd	r22, Y+7	; 0x07
    11d6:	78 85       	ldd	r23, Y+8	; 0x08
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <takePasswordFromUser+0x222>
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

}
    11fc:	6d 96       	adiw	r28, 0x1d	; 29
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <countOneSecond>:


/* this function is executed each 1 second*/
void countOneSecond()
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    121a:	80 91 2f 01 	lds	r24, 0x012F
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	80 93 2f 01 	sts	0x012F, r24
}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <DelaySecondTimer1>:


void DelaySecondTimer1(uint8 timeSec)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	2c 97       	sbiw	r28, 0x0c	; 12
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	8f 83       	std	Y+7, r24	; 0x07
	/* Select the configuration For TIMER1 */
	Timer1_ConfigType Config_Ptr1={CTC_INITIAL_VALUE,CTC_VALUE_FOR_ONE_SECOND,PRESCALE_1024,COMPARE_MODE};
    1240:	ce 01       	movw	r24, r28
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	99 87       	std	Y+9, r25	; 0x09
    1246:	88 87       	std	Y+8, r24	; 0x08
    1248:	e6 e1       	ldi	r30, 0x16	; 22
    124a:	f1 e0       	ldi	r31, 0x01	; 1
    124c:	fb 87       	std	Y+11, r31	; 0x0b
    124e:	ea 87       	std	Y+10, r30	; 0x0a
    1250:	f6 e0       	ldi	r31, 0x06	; 6
    1252:	fc 87       	std	Y+12, r31	; 0x0c
    1254:	ea 85       	ldd	r30, Y+10	; 0x0a
    1256:	fb 85       	ldd	r31, Y+11	; 0x0b
    1258:	00 80       	ld	r0, Z
    125a:	8a 85       	ldd	r24, Y+10	; 0x0a
    125c:	9b 85       	ldd	r25, Y+11	; 0x0b
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	9b 87       	std	Y+11, r25	; 0x0b
    1262:	8a 87       	std	Y+10, r24	; 0x0a
    1264:	e8 85       	ldd	r30, Y+8	; 0x08
    1266:	f9 85       	ldd	r31, Y+9	; 0x09
    1268:	00 82       	st	Z, r0
    126a:	88 85       	ldd	r24, Y+8	; 0x08
    126c:	99 85       	ldd	r25, Y+9	; 0x09
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	99 87       	std	Y+9, r25	; 0x09
    1272:	88 87       	std	Y+8, r24	; 0x08
    1274:	9c 85       	ldd	r25, Y+12	; 0x0c
    1276:	91 50       	subi	r25, 0x01	; 1
    1278:	9c 87       	std	Y+12, r25	; 0x0c
    127a:	ec 85       	ldd	r30, Y+12	; 0x0c
    127c:	ee 23       	and	r30, r30
    127e:	51 f7       	brne	.-44     	; 0x1254 <DelaySecondTimer1+0x2a>
	/* Set the call back function */
	Timer1_setCallBack(countOneSecond);
    1280:	89 e0       	ldi	r24, 0x09	; 9
    1282:	99 e0       	ldi	r25, 0x09	; 9
    1284:	0e 94 28 16 	call	0x2c50	; 0x2c50 <Timer1_setCallBack>
	/*Configuration For TIMER1 */
	Timer1_init(&Config_Ptr1);
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <Timer1_init>
	/* waiting for 15 seconds until the door is unlocking */
	while (g_ticks < timeSec);
    1290:	90 91 2f 01 	lds	r25, 0x012F
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 17       	cp	r25, r24
    1298:	d8 f3       	brcs	.-10     	; 0x1290 <DelaySecondTimer1+0x66>
	g_ticks = 0;
    129a:	10 92 2f 01 	sts	0x012F, r1
	/* stop the timer1 */
	Timer1_deInit();
    129e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Timer1_deInit>
}
    12a2:	2c 96       	adiw	r28, 0x0c	; 12
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <main>:



int main(void)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	6e 97       	sbiw	r28, 0x1e	; 30
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
	/*variable to count user's tries in entering password  */
	uint8 try=0;
    12c8:	18 8a       	std	Y+16, r1	; 0x10
	/*variable takes + or - values*/
	uint8 temp=0;
    12ca:	1f 86       	std	Y+15, r1	; 0x0f
	// Enable global interrupts
	SREG=1<<7;
    12cc:	ef e5       	ldi	r30, 0x5F	; 95
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	80 83       	st	Z, r24
	//select settings for uart
	UART_ConfigType uart_config_1={EIGHT_BITS,DISABLED,ONE_BITS,9600};
    12d4:	9e 01       	movw	r18, r28
    12d6:	2f 5e       	subi	r18, 0xEF	; 239
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	3b 8f       	std	Y+27, r19	; 0x1b
    12dc:	2a 8f       	std	Y+26, r18	; 0x1a
    12de:	8c e1       	ldi	r24, 0x1C	; 28
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	9d 8f       	std	Y+29, r25	; 0x1d
    12e4:	8c 8f       	std	Y+28, r24	; 0x1c
    12e6:	97 e0       	ldi	r25, 0x07	; 7
    12e8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ea:	ec 8d       	ldd	r30, Y+28	; 0x1c
    12ec:	fd 8d       	ldd	r31, Y+29	; 0x1d
    12ee:	00 80       	ld	r0, Z
    12f0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    12f2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	3d 8f       	std	Y+29, r19	; 0x1d
    12fa:	2c 8f       	std	Y+28, r18	; 0x1c
    12fc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    12fe:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1300:	00 82       	st	Z, r0
    1302:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1304:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1306:	2f 5f       	subi	r18, 0xFF	; 255
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	3b 8f       	std	Y+27, r19	; 0x1b
    130c:	2a 8f       	std	Y+26, r18	; 0x1a
    130e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1310:	31 50       	subi	r19, 0x01	; 1
    1312:	3e 8f       	std	Y+30, r19	; 0x1e
    1314:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1316:	88 23       	and	r24, r24
    1318:	41 f7       	brne	.-48     	; 0x12ea <main+0x36>
	UART_init(&uart_config_1);
    131a:	ce 01       	movw	r24, r28
    131c:	41 96       	adiw	r24, 0x11	; 17
    131e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <UART_init>
	//select settings for LCD
	LCD_init();
    1322:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_init>

	while(1)
	{
		/*ask Control if there is password or no */
		UART_sendByte(THERE_IS_PASSWORD_OR_NO);
    1326:	89 e0       	ldi	r24, 0x09	; 9
    1328:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
		/*waiting for CONTROL to answer */
		g_commandRececived=UART_recieveByte();
    132c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    1330:	80 93 2e 01 	sts	0x012E, r24
		if(g_commandRececived==THERE_IS_NO_PASSWORD)
    1334:	80 91 2e 01 	lds	r24, 0x012E
    1338:	87 30       	cpi	r24, 0x07	; 7
    133a:	91 f5       	brne	.+100    	; 0x13a0 <main+0xec>
		{
			/*Step1 – Create a System Password*/
			Step1_Create_System_Password();
    133c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Step1_Create_System_Password>
			/*send the password*/
			UART_sendByte(SENDING_FIRST_PASSWORD);
    1340:	8f e0       	ldi	r24, 0x0F	; 15
    1342:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
			UART_sendArrayOfByte(password,MAX_DIGITS);
    1346:	84 e2       	ldi	r24, 0x24	; 36
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	65 e0       	ldi	r22, 0x05	; 5
    134c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <UART_sendArrayOfByte>
			/*send the check password */
			UART_sendByte(SENDING_SECOND_PASSWORD);
    1350:	8e e0       	ldi	r24, 0x0E	; 14
    1352:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
			UART_sendArrayOfByte(password_check,MAX_DIGITS);
    1356:	89 e2       	ldi	r24, 0x29	; 41
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	65 e0       	ldi	r22, 0x05	; 5
    135c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <UART_sendArrayOfByte>

			//receive command from conrol_ECU (matched or not)
			g_commandRececived=UART_recieveByte();
    1360:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    1364:	80 93 2e 01 	sts	0x012E, r24

			//If the two passwords are unmatched then repeat step 1 again.
			if(g_commandRececived==MISMATCHED)
    1368:	80 91 2e 01 	lds	r24, 0x012E
    136c:	88 23       	and	r24, r24
    136e:	d9 f6       	brne	.-74     	; 0x1326 <main+0x72>
			{
				//display ERROR message,try again
				LCD_clearScreen();
    1370:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
				LCD_displayString("   Mismatched");
    137c:	8f ea       	ldi	r24, 0xAF	; 175
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
				LCD_moveCursor(1,0);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
				LCD_displayString("   Try Again");
    138c:	8d eb       	ldi	r24, 0xBD	; 189
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
				DelaySecondTimer1(TIME_FOR_ERROR_MESSAGE);
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
				Step1_Create_System_Password();
    139a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Step1_Create_System_Password>
    139e:	c3 cf       	rjmp	.-122    	; 0x1326 <main+0x72>
			}
		}
		else
		{

			Step2_Main_Options();
    13a0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Step2_Main_Options>

			/*wait for Press enter button(+ or -)*/
			temp=KEYPAD_getPressedKey();
    13a4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <KEYPAD_getPressedKey>
    13a8:	8f 87       	std	Y+15, r24	; 0x0f
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a6 e9       	ldi	r26, 0x96	; 150
    13b0:	b3 e4       	ldi	r27, 0x43	; 67
    13b2:	8b 87       	std	Y+11, r24	; 0x0b
    13b4:	9c 87       	std	Y+12, r25	; 0x0c
    13b6:	ad 87       	std	Y+13, r26	; 0x0d
    13b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    13bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13be:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a ef       	ldi	r20, 0xFA	; 250
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8f 83       	std	Y+7, r24	; 0x07
    13d4:	98 87       	std	Y+8, r25	; 0x08
    13d6:	a9 87       	std	Y+9, r26	; 0x09
    13d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <main+0x148>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <main+0x1c6>
	else if (__tmp > 65535)
    13fc:	6f 81       	ldd	r22, Y+7	; 0x07
    13fe:	78 85       	ldd	r23, Y+8	; 0x08
    1400:	89 85       	ldd	r24, Y+9	; 0x09
    1402:	9a 85       	ldd	r25, Y+10	; 0x0a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	0f c0       	rjmp	.+30     	; 0x145c <main+0x1a8>
    143e:	88 ec       	ldi	r24, 0xC8	; 200
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <main+0x196>
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	9e 83       	std	Y+6, r25	; 0x06
    145a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <main+0x18a>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <main+0x1d2>
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);

			//send Control_ECU the command
			switch(temp)
    148e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1490:	e8 2f       	mov	r30, r24
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	f9 8f       	std	Y+25, r31	; 0x19
    1496:	e8 8f       	std	Y+24, r30	; 0x18
    1498:	28 8d       	ldd	r18, Y+24	; 0x18
    149a:	39 8d       	ldd	r19, Y+25	; 0x19
    149c:	2b 32       	cpi	r18, 0x2B	; 43
    149e:	31 05       	cpc	r19, r1
    14a0:	39 f0       	breq	.+14     	; 0x14b0 <main+0x1fc>
    14a2:	88 8d       	ldd	r24, Y+24	; 0x18
    14a4:	99 8d       	ldd	r25, Y+25	; 0x19
    14a6:	8d 32       	cpi	r24, 0x2D	; 45
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <main+0x1fa>
    14ac:	7f c0       	rjmp	.+254    	; 0x15ac <main+0x2f8>
    14ae:	3b cf       	rjmp	.-394    	; 0x1326 <main+0x72>
			{
			case '+':
				/*Display enter the pass to open the door and take the pass from user*/
				takePasswordFromUser();
    14b0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <takePasswordFromUser>
				/*Send Command to Control_ECU to check the entered password*/
				UART_sendByte(OPEN_DOOR_MODE);
    14b4:	8d e0       	ldi	r24, 0x0D	; 13
    14b6:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
				/*Send the entered password*/
				UART_sendArrayOfByte(password,MAX_DIGITS);
    14ba:	84 e2       	ldi	r24, 0x24	; 36
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	65 e0       	ldi	r22, 0x05	; 5
    14c0:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <UART_sendArrayOfByte>
				/*Received from Control_ECU the result from comparing two passwords*/
				g_commandRececived=UART_recieveByte();
    14c4:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    14c8:	80 93 2e 01 	sts	0x012E, r24
				if(g_commandRececived==MATCHED)
    14cc:	80 91 2e 01 	lds	r24, 0x012E
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	c1 f5       	brne	.+112    	; 0x1544 <main+0x290>
				{
					/*display a message on the screen “Door is Unlocking” for 15 Seconds */
					LCD_clearScreen();
    14d4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
					LCD_displayString("    Door is");
    14e0:	8a ec       	ldi	r24, 0xCA	; 202
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
					LCD_moveCursor(1,0);
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
					LCD_displayString("   Unlocking");
    14f0:	86 ed       	ldi	r24, 0xD6	; 214
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>

					DelaySecondTimer1(TIME_FOR_UNLOKING_THE_DOOR);
    14f8:	8f e0       	ldi	r24, 0x0F	; 15
    14fa:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
					/*display a message on the screen “Door is Unlocking” for 3 Seconds */
					LCD_clearScreen();
    14fe:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
					LCD_displayString("  Door is Open");
    150a:	83 ee       	ldi	r24, 0xE3	; 227
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
					DelaySecondTimer1(DOOR_HOLD_TIME);
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
					/*display a message on the screen “Door is locking” for 15 Seconds */
					LCD_clearScreen();
    1518:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
					LCD_moveCursor(0,0);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
					LCD_displayString("    Door is");
    1524:	8a ec       	ldi	r24, 0xCA	; 202
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
					LCD_moveCursor(1,0);
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
					LCD_displayString("     locking");
    1534:	82 ef       	ldi	r24, 0xF2	; 242
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
					DelaySecondTimer1(TIME_FOR_LOKING_THE_DOOR);
    153c:	8f e0       	ldi	r24, 0x0F	; 15
    153e:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
    1542:	f1 ce       	rjmp	.-542    	; 0x1326 <main+0x72>
				}
				else
				{
					/*increase the number of tries*/
					try++;
    1544:	88 89       	ldd	r24, Y+16	; 0x10
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	88 8b       	std	Y+16, r24	; 0x10
					if(try<TRIES_NUMBER)
    154a:	88 89       	ldd	r24, Y+16	; 0x10
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	a8 f4       	brcc	.+42     	; 0x157a <main+0x2c6>
					{
						//display ERROR message,try again
						LCD_clearScreen();
    1550:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
						LCD_moveCursor(0,0);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
						LCD_displayString("   Mismatched");
    155c:	8f ea       	ldi	r24, 0xAF	; 175
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
						LCD_moveCursor(1,0);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
						LCD_displayString("   Try Again");
    156c:	8d eb       	ldi	r24, 0xBD	; 189
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
						DelaySecondTimer1(TIME_FOR_ERROR_MESSAGE);
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
					}
					if(try==TRIES_NUMBER)
    157a:	88 89       	ldd	r24, Y+16	; 0x10
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 f4       	brne	.+36     	; 0x15a4 <main+0x2f0>
					{
						/* when numbers of tries=3 turn on the Buzzer*/
						UART_sendByte(BUZZER_ON);
    1580:	80 eb       	ldi	r24, 0xB0	; 176
    1582:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
						/*Display error message on LCD for 1 minute*/
						LCD_clearScreen();
    1586:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
						LCD_moveCursor(0,0);
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
						LCD_displayString(" ERROR MESSAGE");
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
						DelaySecondTimer1(BUZZER_ON_PERIOD);
    159a:	8c e3       	ldi	r24, 0x3C	; 60
    159c:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
						try=0;
    15a0:	18 8a       	std	Y+16, r1	; 0x10
    15a2:	c1 ce       	rjmp	.-638    	; 0x1326 <main+0x72>
					}
					else
						/* else turn off the Buzzer*/
						UART_sendByte(BUZZER_OFF);
    15a4:	8f eb       	ldi	r24, 0xBF	; 191
    15a6:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
    15aa:	bd ce       	rjmp	.-646    	; 0x1326 <main+0x72>
				}
				break;

			case '-':
				/*take password from user to make him able to change password later*/
				takePasswordFromUser();
    15ac:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <takePasswordFromUser>
				/*Select the Mode*/
				UART_sendByte(CHANGE_PASSWORD);
    15b0:	8c e0       	ldi	r24, 0x0C	; 12
    15b2:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
				/*Send the entered password*/
				UART_sendArrayOfByte(password,MAX_DIGITS);
    15b6:	84 e2       	ldi	r24, 0x24	; 36
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	65 e0       	ldi	r22, 0x05	; 5
    15bc:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <UART_sendArrayOfByte>
				/*Received from Control_ECU the result from comparing two passwords*/
				g_commandRececived=UART_recieveByte();
    15c0:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    15c4:	80 93 2e 01 	sts	0x012E, r24
				if(g_commandRececived==MISMATCHED)
    15c8:	80 91 2e 01 	lds	r24, 0x012E
    15cc:	88 23       	and	r24, r24
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <main+0x31e>
    15d0:	aa ce       	rjmp	.-684    	; 0x1326 <main+0x72>
				{
					/*increase the number of tries*/
					try++;
    15d2:	88 89       	ldd	r24, Y+16	; 0x10
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	88 8b       	std	Y+16, r24	; 0x10
					if(try<TRIES_NUMBER)
    15d8:	88 89       	ldd	r24, Y+16	; 0x10
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	a8 f4       	brcc	.+42     	; 0x1608 <main+0x354>
					{
						//display ERROR message,try again
						LCD_clearScreen();
    15de:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
						LCD_moveCursor(0,0);
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
						LCD_displayString("   Mismatched");
    15ea:	8f ea       	ldi	r24, 0xAF	; 175
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
						LCD_moveCursor(1,0);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
						LCD_displayString("   Try Again");
    15fa:	8d eb       	ldi	r24, 0xBD	; 189
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
						DelaySecondTimer1(TIME_FOR_ERROR_MESSAGE);
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
					}
					if(try==TRIES_NUMBER)
    1608:	88 89       	ldd	r24, Y+16	; 0x10
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	91 f4       	brne	.+36     	; 0x1632 <main+0x37e>
					{
						/* when numbers of tries=3 turn on the Buzzer*/
						UART_sendByte(BUZZER_ON);
    160e:	80 eb       	ldi	r24, 0xB0	; 176
    1610:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
						/*Display error message on LCD for 1 minute*/
						LCD_clearScreen();
    1614:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_clearScreen>
						LCD_moveCursor(0,0);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
						LCD_displayString(" ERROR MESSAGE");
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
						DelaySecondTimer1(BUZZER_ON_PERIOD);
    1628:	8c e3       	ldi	r24, 0x3C	; 60
    162a:	0e 94 15 09 	call	0x122a	; 0x122a <DelaySecondTimer1>
						try=0;
    162e:	18 8a       	std	Y+16, r1	; 0x10
    1630:	7a ce       	rjmp	.-780    	; 0x1326 <main+0x72>
					}
					else
						/* else turn off the Buzzer*/
						UART_sendByte(BUZZER_OFF);
    1632:	8f eb       	ldi	r24, 0xBF	; 191
    1634:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
    1638:	76 ce       	rjmp	.-788    	; 0x1326 <main+0x72>

0000163a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_setupPinDirection+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <GPIO_setupPinDirection+0x8>
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	6a 83       	std	Y+2, r22	; 0x02
    164c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 30       	cpi	r24, 0x08	; 8
    1652:	08 f0       	brcs	.+2      	; 0x1656 <GPIO_setupPinDirection+0x1c>
    1654:	d5 c0       	rjmp	.+426    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	08 f0       	brcs	.+2      	; 0x165e <GPIO_setupPinDirection+0x24>
    165c:	d1 c0       	rjmp	.+418    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3d 83       	std	Y+5, r19	; 0x05
    1666:	2c 83       	std	Y+4, r18	; 0x04
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <GPIO_setupPinDirection+0x3a>
    1672:	43 c0       	rjmp	.+134    	; 0x16fa <GPIO_setupPinDirection+0xc0>
    1674:	2c 81       	ldd	r18, Y+4	; 0x04
    1676:	3d 81       	ldd	r19, Y+5	; 0x05
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <GPIO_setupPinDirection+0x4e>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	71 f0       	breq	.+28     	; 0x16a2 <GPIO_setupPinDirection+0x68>
    1686:	bc c0       	rjmp	.+376    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
    1688:	2c 81       	ldd	r18, Y+4	; 0x04
    168a:	3d 81       	ldd	r19, Y+5	; 0x05
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <GPIO_setupPinDirection+0x5a>
    1692:	5f c0       	rjmp	.+190    	; 0x1752 <GPIO_setupPinDirection+0x118>
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <GPIO_setupPinDirection+0x66>
    169e:	85 c0       	rjmp	.+266    	; 0x17aa <GPIO_setupPinDirection+0x170>
    16a0:	af c0       	rjmp	.+350    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	a1 f4       	brne	.+40     	; 0x16d0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16a8:	aa e3       	ldi	r26, 0x3A	; 58
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ea e3       	ldi	r30, 0x3A	; 58
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_setupPinDirection+0x8c>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_setupPinDirection+0x88>
    16ca:	84 2b       	or	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	98 c0       	rjmp	.+304    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16d0:	aa e3       	ldi	r26, 0x3A	; 58
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ea e3       	ldi	r30, 0x3A	; 58
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_setupPinDirection+0xb4>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_setupPinDirection+0xb0>
    16f2:	80 95       	com	r24
    16f4:	84 23       	and	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	83 c0       	rjmp	.+262    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	a1 f4       	brne	.+40     	; 0x1728 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1700:	a7 e3       	ldi	r26, 0x37	; 55
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e7 e3       	ldi	r30, 0x37	; 55
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_setupPinDirection+0xe4>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_setupPinDirection+0xe0>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	6c c0       	rjmp	.+216    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1728:	a7 e3       	ldi	r26, 0x37	; 55
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e7 e3       	ldi	r30, 0x37	; 55
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <GPIO_setupPinDirection+0x10c>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <GPIO_setupPinDirection+0x108>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	57 c0       	rjmp	.+174    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	a1 f4       	brne	.+40     	; 0x1780 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1758:	a4 e3       	ldi	r26, 0x34	; 52
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e4 e3       	ldi	r30, 0x34	; 52
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <GPIO_setupPinDirection+0x13c>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <GPIO_setupPinDirection+0x138>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	40 c0       	rjmp	.+128    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1780:	a4 e3       	ldi	r26, 0x34	; 52
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e4 e3       	ldi	r30, 0x34	; 52
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <GPIO_setupPinDirection+0x164>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <GPIO_setupPinDirection+0x160>
    17a2:	80 95       	com	r24
    17a4:	84 23       	and	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	2b c0       	rjmp	.+86     	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	a1 f4       	brne	.+40     	; 0x17d8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17b0:	a1 e3       	ldi	r26, 0x31	; 49
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e1 e3       	ldi	r30, 0x31	; 49
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <GPIO_setupPinDirection+0x194>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <GPIO_setupPinDirection+0x190>
    17d2:	84 2b       	or	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17d8:	a1 e3       	ldi	r26, 0x31	; 49
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e1 e3       	ldi	r30, 0x31	; 49
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 2e       	mov	r0, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <GPIO_setupPinDirection+0x1bc>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <GPIO_setupPinDirection+0x1b8>
    17fa:	80 95       	com	r24
    17fc:	84 23       	and	r24, r20
    17fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_writePin+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <GPIO_writePin+0x8>
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	6a 83       	std	Y+2, r22	; 0x02
    1822:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	88 30       	cpi	r24, 0x08	; 8
    1828:	08 f0       	brcs	.+2      	; 0x182c <GPIO_writePin+0x1c>
    182a:	d5 c0       	rjmp	.+426    	; 0x19d6 <GPIO_writePin+0x1c6>
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	08 f0       	brcs	.+2      	; 0x1834 <GPIO_writePin+0x24>
    1832:	d1 c0       	rjmp	.+418    	; 0x19d6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3d 83       	std	Y+5, r19	; 0x05
    183c:	2c 83       	std	Y+4, r18	; 0x04
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <GPIO_writePin+0x3a>
    1848:	43 c0       	rjmp	.+134    	; 0x18d0 <GPIO_writePin+0xc0>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <GPIO_writePin+0x4e>
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	71 f0       	breq	.+28     	; 0x1878 <GPIO_writePin+0x68>
    185c:	bc c0       	rjmp	.+376    	; 0x19d6 <GPIO_writePin+0x1c6>
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <GPIO_writePin+0x5a>
    1868:	5f c0       	rjmp	.+190    	; 0x1928 <GPIO_writePin+0x118>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <GPIO_writePin+0x66>
    1874:	85 c0       	rjmp	.+266    	; 0x1980 <GPIO_writePin+0x170>
    1876:	af c0       	rjmp	.+350    	; 0x19d6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value)
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 23       	and	r24, r24
    187c:	a1 f0       	breq	.+40     	; 0x18a6 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    187e:	ab e3       	ldi	r26, 0x3B	; 59
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	eb e3       	ldi	r30, 0x3B	; 59
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_writePin+0x8c>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_writePin+0x88>
    18a0:	84 2b       	or	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	98 c0       	rjmp	.+304    	; 0x19d6 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    18a6:	ab e3       	ldi	r26, 0x3B	; 59
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	eb e3       	ldi	r30, 0x3B	; 59
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <GPIO_writePin+0xb4>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <GPIO_writePin+0xb0>
    18c8:	80 95       	com	r24
    18ca:	84 23       	and	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	83 c0       	rjmp	.+262    	; 0x19d6 <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if(value)
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	88 23       	and	r24, r24
    18d4:	a1 f0       	breq	.+40     	; 0x18fe <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    18d6:	a8 e3       	ldi	r26, 0x38	; 56
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <GPIO_writePin+0xe4>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <GPIO_writePin+0xe0>
    18f8:	84 2b       	or	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	6c c0       	rjmp	.+216    	; 0x19d6 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    18fe:	a8 e3       	ldi	r26, 0x38	; 56
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e8 e3       	ldi	r30, 0x38	; 56
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_writePin+0x10c>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_writePin+0x108>
    1920:	80 95       	com	r24
    1922:	84 23       	and	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	57 c0       	rjmp	.+174    	; 0x19d6 <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if(value)
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 23       	and	r24, r24
    192c:	a1 f0       	breq	.+40     	; 0x1956 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    192e:	a5 e3       	ldi	r26, 0x35	; 53
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e3       	ldi	r30, 0x35	; 53
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <GPIO_writePin+0x13c>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <GPIO_writePin+0x138>
    1950:	84 2b       	or	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	40 c0       	rjmp	.+128    	; 0x19d6 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    1956:	a5 e3       	ldi	r26, 0x35	; 53
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e5 e3       	ldi	r30, 0x35	; 53
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 2e       	mov	r0, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <GPIO_writePin+0x164>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	0a 94       	dec	r0
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <GPIO_writePin+0x160>
    1978:	80 95       	com	r24
    197a:	84 23       	and	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	2b c0       	rjmp	.+86     	; 0x19d6 <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if(value)
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	88 23       	and	r24, r24
    1984:	a1 f0       	breq	.+40     	; 0x19ae <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1986:	a2 e3       	ldi	r26, 0x32	; 50
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e2 e3       	ldi	r30, 0x32	; 50
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <GPIO_writePin+0x194>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <GPIO_writePin+0x190>
    19a8:	84 2b       	or	r24, r20
    19aa:	8c 93       	st	X, r24
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    19ae:	a2 e3       	ldi	r26, 0x32	; 50
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <GPIO_writePin+0x1bc>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <GPIO_writePin+0x1b8>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
			break;
		}
	}

}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GPIO_readPin+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_readPin+0x8>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	88 30       	cpi	r24, 0x08	; 8
    19fc:	18 f4       	brcc	.+6      	; 0x1a04 <GPIO_readPin+0x1e>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	10 f0       	brcs	.+4      	; 0x1a08 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1a04:	1d 82       	std	Y+5, r1	; 0x05
    1a06:	82 c0       	rjmp	.+260    	; 0x1b0c <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	3c 83       	std	Y+4, r19	; 0x04
    1a10:	2b 83       	std	Y+3, r18	; 0x03
    1a12:	4b 81       	ldd	r20, Y+3	; 0x03
    1a14:	5c 81       	ldd	r21, Y+4	; 0x04
    1a16:	41 30       	cpi	r20, 0x01	; 1
    1a18:	51 05       	cpc	r21, r1
    1a1a:	79 f1       	breq	.+94     	; 0x1a7a <GPIO_readPin+0x94>
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	82 30       	cpi	r24, 0x02	; 2
    1a22:	91 05       	cpc	r25, r1
    1a24:	34 f4       	brge	.+12     	; 0x1a32 <GPIO_readPin+0x4c>
    1a26:	2b 81       	ldd	r18, Y+3	; 0x03
    1a28:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2a:	21 15       	cp	r18, r1
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	69 f0       	breq	.+26     	; 0x1a4a <GPIO_readPin+0x64>
    1a30:	6c c0       	rjmp	.+216    	; 0x1b0a <GPIO_readPin+0x124>
    1a32:	4b 81       	ldd	r20, Y+3	; 0x03
    1a34:	5c 81       	ldd	r21, Y+4	; 0x04
    1a36:	42 30       	cpi	r20, 0x02	; 2
    1a38:	51 05       	cpc	r21, r1
    1a3a:	b9 f1       	breq	.+110    	; 0x1aaa <GPIO_readPin+0xc4>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	91 05       	cpc	r25, r1
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <GPIO_readPin+0x62>
    1a46:	49 c0       	rjmp	.+146    	; 0x1ada <GPIO_readPin+0xf4>
    1a48:	60 c0       	rjmp	.+192    	; 0x1b0a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a4a:	e9 e3       	ldi	r30, 0x39	; 57
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a9 01       	movw	r20, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <GPIO_readPin+0x7c>
    1a5e:	55 95       	asr	r21
    1a60:	47 95       	ror	r20
    1a62:	8a 95       	dec	r24
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <GPIO_readPin+0x78>
    1a66:	ca 01       	movw	r24, r20
    1a68:	81 70       	andi	r24, 0x01	; 1
    1a6a:	90 70       	andi	r25, 0x00	; 0
    1a6c:	88 23       	and	r24, r24
    1a6e:	19 f0       	breq	.+6      	; 0x1a76 <GPIO_readPin+0x90>
				return LOGIC_HIGH;
    1a70:	51 e0       	ldi	r21, 0x01	; 1
    1a72:	5d 83       	std	Y+5, r21	; 0x05
    1a74:	4b c0       	rjmp	.+150    	; 0x1b0c <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1a76:	1d 82       	std	Y+5, r1	; 0x05
    1a78:	49 c0       	rjmp	.+146    	; 0x1b0c <GPIO_readPin+0x126>
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a7a:	e6 e3       	ldi	r30, 0x36	; 54
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a9 01       	movw	r20, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <GPIO_readPin+0xac>
    1a8e:	55 95       	asr	r21
    1a90:	47 95       	ror	r20
    1a92:	8a 95       	dec	r24
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <GPIO_readPin+0xa8>
    1a96:	ca 01       	movw	r24, r20
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	90 70       	andi	r25, 0x00	; 0
    1a9c:	88 23       	and	r24, r24
    1a9e:	19 f0       	breq	.+6      	; 0x1aa6 <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
    1aa0:	51 e0       	ldi	r21, 0x01	; 1
    1aa2:	5d 83       	std	Y+5, r21	; 0x05
    1aa4:	33 c0       	rjmp	.+102    	; 0x1b0c <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1aa6:	1d 82       	std	Y+5, r1	; 0x05
    1aa8:	31 c0       	rjmp	.+98     	; 0x1b0c <GPIO_readPin+0x126>
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1aaa:	e3 e3       	ldi	r30, 0x33	; 51
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a9 01       	movw	r20, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <GPIO_readPin+0xdc>
    1abe:	55 95       	asr	r21
    1ac0:	47 95       	ror	r20
    1ac2:	8a 95       	dec	r24
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <GPIO_readPin+0xd8>
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	81 70       	andi	r24, 0x01	; 1
    1aca:	90 70       	andi	r25, 0x00	; 0
    1acc:	88 23       	and	r24, r24
    1ace:	19 f0       	breq	.+6      	; 0x1ad6 <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
    1ad0:	51 e0       	ldi	r21, 0x01	; 1
    1ad2:	5d 83       	std	Y+5, r21	; 0x05
    1ad4:	1b c0       	rjmp	.+54     	; 0x1b0c <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1ad6:	1d 82       	std	Y+5, r1	; 0x05
    1ad8:	19 c0       	rjmp	.+50     	; 0x1b0c <GPIO_readPin+0x126>
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ada:	e0 e3       	ldi	r30, 0x30	; 48
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <GPIO_readPin+0x10c>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <GPIO_readPin+0x108>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	88 23       	and	r24, r24
    1afe:	19 f0       	breq	.+6      	; 0x1b06 <GPIO_readPin+0x120>
				return LOGIC_HIGH;
    1b00:	51 e0       	ldi	r21, 0x01	; 1
    1b02:	5d 83       	std	Y+5, r21	; 0x05
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1b06:	1d 82       	std	Y+5, r1	; 0x05
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <GPIO_readPin+0x126>
		}
		return LOGIC_LOW;
    1b0a:	1d 82       	std	Y+5, r1	; 0x05
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
	}


}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <GPIO_setupPortDirection+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <GPIO_setupPortDirection+0x8>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	90 f5       	brcc	.+100    	; 0x1b98 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3c 83       	std	Y+4, r19	; 0x04
    1b3c:	2b 83       	std	Y+3, r18	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	91 05       	cpc	r25, r1
    1b46:	d1 f0       	breq	.+52     	; 0x1b7c <GPIO_setupPortDirection+0x5e>
    1b48:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <GPIO_setupPortDirection+0x3e>
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <GPIO_setupPortDirection+0x54>
    1b5a:	1e c0       	rjmp	.+60     	; 0x1b98 <GPIO_setupPortDirection+0x7a>
    1b5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <GPIO_setupPortDirection+0x68>
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	81 f0       	breq	.+32     	; 0x1b90 <GPIO_setupPortDirection+0x72>
    1b70:	13 c0       	rjmp	.+38     	; 0x1b98 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b72:	ea e3       	ldi	r30, 0x3A	; 58
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	80 83       	st	Z, r24
    1b7a:	0e c0       	rjmp	.+28     	; 0x1b98 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b7c:	e7 e3       	ldi	r30, 0x37	; 55
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 83       	st	Z, r24
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b86:	e4 e3       	ldi	r30, 0x34	; 52
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b90:	e1 e3       	ldi	r30, 0x31	; 49
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <GPIO_writePort+0x6>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <GPIO_writePort+0x8>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	90 f5       	brcc	.+100    	; 0x1c20 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3c 83       	std	Y+4, r19	; 0x04
    1bc4:	2b 83       	std	Y+3, r18	; 0x03
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	91 05       	cpc	r25, r1
    1bce:	d1 f0       	breq	.+52     	; 0x1c04 <GPIO_writePort+0x5e>
    1bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <GPIO_writePort+0x3e>
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <GPIO_writePort+0x54>
    1be2:	1e c0       	rjmp	.+60     	; 0x1c20 <GPIO_writePort+0x7a>
    1be4:	2b 81       	ldd	r18, Y+3	; 0x03
    1be6:	3c 81       	ldd	r19, Y+4	; 0x04
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	81 f0       	breq	.+32     	; 0x1c0e <GPIO_writePort+0x68>
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <GPIO_writePort+0x72>
    1bf8:	13 c0       	rjmp	.+38     	; 0x1c20 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1bfa:	eb e3       	ldi	r30, 0x3B	; 59
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	80 83       	st	Z, r24
    1c02:	0e c0       	rjmp	.+28     	; 0x1c20 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1c04:	e8 e3       	ldi	r30, 0x38	; 56
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	80 83       	st	Z, r24
    1c0c:	09 c0       	rjmp	.+18     	; 0x1c20 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1c0e:	e5 e3       	ldi	r30, 0x35	; 53
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	80 83       	st	Z, r24
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1c18:	e2 e3       	ldi	r30, 0x32	; 50
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <GPIO_readPort+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <GPIO_readPort+0x8>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	10 f0       	brcs	.+4      	; 0x1c46 <GPIO_readPort+0x18>
	{
		return LOGIC_LOW;
    1c42:	1c 82       	std	Y+4, r1	; 0x04
    1c44:	34 c0       	rjmp	.+104    	; 0x1cae <GPIO_readPort+0x80>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3b 83       	std	Y+3, r19	; 0x03
    1c4e:	2a 83       	std	Y+2, r18	; 0x02
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	91 05       	cpc	r25, r1
    1c58:	d1 f0       	breq	.+52     	; 0x1c8e <GPIO_readPort+0x60>
    1c5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <GPIO_readPort+0x40>
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	9b 81       	ldd	r25, Y+3	; 0x03
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <GPIO_readPort+0x56>
    1c6c:	1f c0       	rjmp	.+62     	; 0x1cac <GPIO_readPort+0x7e>
    1c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c70:	3b 81       	ldd	r19, Y+3	; 0x03
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	81 f0       	breq	.+32     	; 0x1c98 <GPIO_readPort+0x6a>
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	91 05       	cpc	r25, r1
    1c80:	81 f0       	breq	.+32     	; 0x1ca2 <GPIO_readPort+0x74>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PORTA;
    1c84:	eb e3       	ldi	r30, 0x3B	; 59
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	90 81       	ld	r25, Z
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	10 c0       	rjmp	.+32     	; 0x1cae <GPIO_readPort+0x80>
		case PORTB_ID:
			return PORTB;
    1c8e:	e8 e3       	ldi	r30, 0x38	; 56
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	20 81       	ld	r18, Z
    1c94:	2c 83       	std	Y+4, r18	; 0x04
    1c96:	0b c0       	rjmp	.+22     	; 0x1cae <GPIO_readPort+0x80>
		case PORTC_ID:
			return PORTC;
    1c98:	e5 e3       	ldi	r30, 0x35	; 53
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	30 81       	ld	r19, Z
    1c9e:	3c 83       	std	Y+4, r19	; 0x04
    1ca0:	06 c0       	rjmp	.+12     	; 0x1cae <GPIO_readPort+0x80>
		case PORTD_ID:
			return PORTD;
    1ca2:	e2 e3       	ldi	r30, 0x32	; 50
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8c 83       	std	Y+4, r24	; 0x04
    1caa:	01 c0       	rjmp	.+2      	; 0x1cae <GPIO_readPort+0x80>
		}
		return LOGIC_LOW;
    1cac:	1c 82       	std	Y+4, r1	; 0x04
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	60 97       	sbiw	r28, 0x10	; 16
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	63 e0       	ldi	r22, 0x03	; 3
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	64 e0       	ldi	r22, 0x04	; 4
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	65 e0       	ldi	r22, 0x05	; 5
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	66 e0       	ldi	r22, 0x06	; 6
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	67 e0       	ldi	r22, 0x07	; 7
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d22:	1f 86       	std	Y+15, r1	; 0x0f
    1d24:	ab c0       	rjmp	.+342    	; 0x1e7c <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d3a:	18 8a       	std	Y+16, r1	; 0x10
    1d3c:	22 c0       	rjmp	.+68     	; 0x1d82 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d3e:	88 89       	ldd	r24, Y+16	; 0x10
    1d40:	98 2f       	mov	r25, r24
    1d42:	9c 5f       	subi	r25, 0xFC	; 252
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	69 2f       	mov	r22, r25
    1d48:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_readPin>
    1d4c:	88 23       	and	r24, r24
    1d4e:	b1 f4       	brne	.+44     	; 0x1d7c <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	98 2f       	mov	r25, r24
    1d60:	88 89       	ldd	r24, Y+16	; 0x10
    1d62:	89 0f       	add	r24, r25
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1d6a:	60 96       	adiw	r28, 0x10	; 16
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d7c:	88 89       	ldd	r24, Y+16	; 0x10
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	88 8b       	std	Y+16, r24	; 0x10
    1d82:	88 89       	ldd	r24, Y+16	; 0x10
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	d8 f2       	brcs	.-74     	; 0x1d3e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a0 ea       	ldi	r26, 0xA0	; 160
    1d98:	b0 e4       	ldi	r27, 0x40	; 64
    1d9a:	8b 87       	std	Y+11, r24	; 0x0b
    1d9c:	9c 87       	std	Y+12, r25	; 0x0c
    1d9e:	ad 87       	std	Y+13, r26	; 0x0d
    1da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a ef       	ldi	r20, 0xFA	; 250
    1db0:	54 e4       	ldi	r21, 0x44	; 68
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	8f 83       	std	Y+7, r24	; 0x07
    1dbc:	98 87       	std	Y+8, r25	; 0x08
    1dbe:	a9 87       	std	Y+9, r26	; 0x09
    1dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	4c f5       	brge	.+82     	; 0x1e4e <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e2       	ldi	r20, 0x20	; 32
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <KEYPAD_getPressedKey+0x186>
    1e26:	88 ec       	ldi	r24, 0xC8	; 200
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <KEYPAD_getPressedKey+0x174>
    1e36:	9c 83       	std	Y+4, r25	; 0x04
    1e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <KEYPAD_getPressedKey+0x168>
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e50:	78 85       	ldd	r23, Y+8	; 0x08
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <KEYPAD_getPressedKey+0x1b0>
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	8f 87       	std	Y+15, r24	; 0x0f
    1e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7e:	84 30       	cpi	r24, 0x04	; 4
    1e80:	08 f4       	brcc	.+2      	; 0x1e84 <KEYPAD_getPressedKey+0x1c6>
    1e82:	51 cf       	rjmp	.-350    	; 0x1d26 <KEYPAD_getPressedKey+0x68>
    1e84:	4e cf       	rjmp	.-356    	; 0x1d22 <KEYPAD_getPressedKey+0x64>

00001e86 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1e94:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3c 83       	std	Y+4, r19	; 0x04
    1e9e:	2b 83       	std	Y+3, r18	; 0x03
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	88 30       	cpi	r24, 0x08	; 8
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x26>
    1eaa:	70 c0       	rjmp	.+224    	; 0x1f8c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1eac:	2b 81       	ldd	r18, Y+3	; 0x03
    1eae:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb0:	29 30       	cpi	r18, 0x09	; 9
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	5c f5       	brge	.+86     	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ec0:	59 c0       	rjmp	.+178    	; 0x1f74 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec6:	25 30       	cpi	r18, 0x05	; 5
    1ec8:	31 05       	cpc	r19, r1
    1eca:	9c f4       	brge	.+38     	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	82 30       	cpi	r24, 0x02	; 2
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1ed6:	48 c0       	rjmp	.+144    	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eda:	3c 81       	ldd	r19, Y+4	; 0x04
    1edc:	23 30       	cpi	r18, 0x03	; 3
    1ede:	31 05       	cpc	r19, r1
    1ee0:	0c f0       	brlt	.+2      	; 0x1ee4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1ee2:	45 c0       	rjmp	.+138    	; 0x1f6e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	91 05       	cpc	r25, r1
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1eee:	39 c0       	rjmp	.+114    	; 0x1f62 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ef0:	67 c0       	rjmp	.+206    	; 0x1fc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	26 30       	cpi	r18, 0x06	; 6
    1ef8:	31 05       	cpc	r19, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x78>
    1efc:	41 c0       	rjmp	.+130    	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	87 30       	cpi	r24, 0x07	; 7
    1f04:	91 05       	cpc	r25, r1
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f08:	3e c0       	rjmp	.+124    	; 0x1f86 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f0a:	37 c0       	rjmp	.+110    	; 0x1f7a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f10:	2c 30       	cpi	r18, 0x0C	; 12
    1f12:	31 05       	cpc	r19, r1
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f16:	46 c0       	rjmp	.+140    	; 0x1fa4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	8d 30       	cpi	r24, 0x0D	; 13
    1f1e:	91 05       	cpc	r25, r1
    1f20:	5c f4       	brge	.+22     	; 0x1f38 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	2a 30       	cpi	r18, 0x0A	; 10
    1f28:	31 05       	cpc	r19, r1
    1f2a:	b1 f1       	breq	.+108    	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	8b 30       	cpi	r24, 0x0B	; 11
    1f32:	91 05       	cpc	r25, r1
    1f34:	a4 f5       	brge	.+104    	; 0x1f9e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f36:	2d c0       	rjmp	.+90     	; 0x1f92 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	2e 30       	cpi	r18, 0x0E	; 14
    1f3e:	31 05       	cpc	r19, r1
    1f40:	b9 f1       	breq	.+110    	; 0x1fb0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	8e 30       	cpi	r24, 0x0E	; 14
    1f48:	91 05       	cpc	r25, r1
    1f4a:	7c f1       	brlt	.+94     	; 0x1faa <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	2f 30       	cpi	r18, 0x0F	; 15
    1f52:	31 05       	cpc	r19, r1
    1f54:	79 f1       	breq	.+94     	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	80 31       	cpi	r24, 0x10	; 16
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	69 f1       	breq	.+90     	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f60:	2f c0       	rjmp	.+94     	; 0x1fc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1f62:	87 e0       	ldi	r24, 0x07	; 7
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	2e c0       	rjmp	.+92     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1f68:	88 e0       	ldi	r24, 0x08	; 8
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	2b c0       	rjmp	.+86     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1f6e:	89 e0       	ldi	r24, 0x09	; 9
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	28 c0       	rjmp	.+80     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1f74:	85 e2       	ldi	r24, 0x25	; 37
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	25 c0       	rjmp	.+74     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1f7a:	84 e0       	ldi	r24, 0x04	; 4
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	22 c0       	rjmp	.+68     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1f80:	85 e0       	ldi	r24, 0x05	; 5
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	1f c0       	rjmp	.+62     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1f86:	86 e0       	ldi	r24, 0x06	; 6
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	1c c0       	rjmp	.+56     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1f8c:	8a e2       	ldi	r24, 0x2A	; 42
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	19 c0       	rjmp	.+50     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	16 c0       	rjmp	.+44     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	13 c0       	rjmp	.+38     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1f9e:	83 e0       	ldi	r24, 0x03	; 3
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	10 c0       	rjmp	.+32     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1fa4:	8d e2       	ldi	r24, 0x2D	; 45
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	0d c0       	rjmp	.+26     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1faa:	8d e0       	ldi	r24, 0x0D	; 13
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	0a c0       	rjmp	.+20     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1fb0:	19 82       	std	Y+1, r1	; 0x01
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1fb4:	8d e3       	ldi	r24, 0x3D	; 61
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	05 c0       	rjmp	.+10     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1fba:	8b e2       	ldi	r24, 0x2B	; 43
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	2e 97       	sbiw	r28, 0x0e	; 14
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 ea       	ldi	r26, 0xA0	; 160
    2002:	b1 e4       	ldi	r27, 0x41	; 65
    2004:	8b 87       	std	Y+11, r24	; 0x0b
    2006:	9c 87       	std	Y+12, r25	; 0x0c
    2008:	ad 87       	std	Y+13, r26	; 0x0d
    200a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	98 87       	std	Y+8, r25	; 0x08
    2028:	a9 87       	std	Y+9, r26	; 0x09
    202a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_init+0x7a>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_init+0xf8>
	else if (__tmp > 65535)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_init+0xda>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_init+0xc8>
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_init+0xbc>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_init+0x104>
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	6f ef       	ldi	r22, 0xFF	; 255
    20e4:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    20e8:	88 e3       	ldi	r24, 0x38	; 56
    20ea:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20ee:	8c e0       	ldi	r24, 0x0C	; 12
    20f0:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_sendCommand>
}
    20fa:	2e 96       	adiw	r28, 0x0e	; 14
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	e9 97       	sbiw	r28, 0x39	; 57
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e8       	ldi	r26, 0x80	; 128
    2132:	bf e3       	ldi	r27, 0x3F	; 63
    2134:	8d ab       	std	Y+53, r24	; 0x35
    2136:	9e ab       	std	Y+54, r25	; 0x36
    2138:	af ab       	std	Y+55, r26	; 0x37
    213a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	6d a9       	ldd	r22, Y+53	; 0x35
    213e:	7e a9       	ldd	r23, Y+54	; 0x36
    2140:	8f a9       	ldd	r24, Y+55	; 0x37
    2142:	98 ad       	ldd	r25, Y+56	; 0x38
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a ef       	ldi	r20, 0xFA	; 250
    214a:	54 e4       	ldi	r21, 0x44	; 68
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	89 ab       	std	Y+49, r24	; 0x31
    2156:	9a ab       	std	Y+50, r25	; 0x32
    2158:	ab ab       	std	Y+51, r26	; 0x33
    215a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    215c:	69 a9       	ldd	r22, Y+49	; 0x31
    215e:	7a a9       	ldd	r23, Y+50	; 0x32
    2160:	8b a9       	ldd	r24, Y+51	; 0x33
    2162:	9c a9       	ldd	r25, Y+52	; 0x34
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <LCD_sendCommand+0x72>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	98 ab       	std	Y+48, r25	; 0x30
    217a:	8f a7       	std	Y+47, r24	; 0x2f
    217c:	3f c0       	rjmp	.+126    	; 0x21fc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    217e:	69 a9       	ldd	r22, Y+49	; 0x31
    2180:	7a a9       	ldd	r23, Y+50	; 0x32
    2182:	8b a9       	ldd	r24, Y+51	; 0x33
    2184:	9c a9       	ldd	r25, Y+52	; 0x34
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	4c f5       	brge	.+82     	; 0x21e8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	6d a9       	ldd	r22, Y+53	; 0x35
    2198:	7e a9       	ldd	r23, Y+54	; 0x36
    219a:	8f a9       	ldd	r24, Y+55	; 0x37
    219c:	98 ad       	ldd	r25, Y+56	; 0x38
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	98 ab       	std	Y+48, r25	; 0x30
    21bc:	8f a7       	std	Y+47, r24	; 0x2f
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_sendCommand+0xd2>
    21c0:	88 ec       	ldi	r24, 0xC8	; 200
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9e a7       	std	Y+46, r25	; 0x2e
    21c6:	8d a7       	std	Y+45, r24	; 0x2d
    21c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_sendCommand+0xc0>
    21d0:	9e a7       	std	Y+46, r25	; 0x2e
    21d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d6:	98 a9       	ldd	r25, Y+48	; 0x30
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	98 ab       	std	Y+48, r25	; 0x30
    21dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e0:	98 a9       	ldd	r25, Y+48	; 0x30
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	69 f7       	brne	.-38     	; 0x21c0 <LCD_sendCommand+0xb4>
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e8:	69 a9       	ldd	r22, Y+49	; 0x31
    21ea:	7a a9       	ldd	r23, Y+50	; 0x32
    21ec:	8b a9       	ldd	r24, Y+51	; 0x33
    21ee:	9c a9       	ldd	r25, Y+52	; 0x34
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	98 ab       	std	Y+48, r25	; 0x30
    21fa:	8f a7       	std	Y+47, r24	; 0x2f
    21fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2200:	9c a7       	std	Y+44, r25	; 0x2c
    2202:	8b a7       	std	Y+43, r24	; 0x2b
    2204:	8b a5       	ldd	r24, Y+43	; 0x2b
    2206:	9c a5       	ldd	r25, Y+44	; 0x2c
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_sendCommand+0xfc>
    220c:	9c a7       	std	Y+44, r25	; 0x2c
    220e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	61 e0       	ldi	r22, 0x01	; 1
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e8       	ldi	r26, 0x80	; 128
    2220:	bf e3       	ldi	r27, 0x3F	; 63
    2222:	8f a3       	std	Y+39, r24	; 0x27
    2224:	98 a7       	std	Y+40, r25	; 0x28
    2226:	a9 a7       	std	Y+41, r26	; 0x29
    2228:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	6f a1       	ldd	r22, Y+39	; 0x27
    222c:	78 a5       	ldd	r23, Y+40	; 0x28
    222e:	89 a5       	ldd	r24, Y+41	; 0x29
    2230:	9a a5       	ldd	r25, Y+42	; 0x2a
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4a ef       	ldi	r20, 0xFA	; 250
    2238:	54 e4       	ldi	r21, 0x44	; 68
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8b a3       	std	Y+35, r24	; 0x23
    2244:	9c a3       	std	Y+36, r25	; 0x24
    2246:	ad a3       	std	Y+37, r26	; 0x25
    2248:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    224a:	6b a1       	ldd	r22, Y+35	; 0x23
    224c:	7c a1       	ldd	r23, Y+36	; 0x24
    224e:	8d a1       	ldd	r24, Y+37	; 0x25
    2250:	9e a1       	ldd	r25, Y+38	; 0x26
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	2c f4       	brge	.+10     	; 0x226c <LCD_sendCommand+0x160>
		__ticks = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9a a3       	std	Y+34, r25	; 0x22
    2268:	89 a3       	std	Y+33, r24	; 0x21
    226a:	3f c0       	rjmp	.+126    	; 0x22ea <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    226c:	6b a1       	ldd	r22, Y+35	; 0x23
    226e:	7c a1       	ldd	r23, Y+36	; 0x24
    2270:	8d a1       	ldd	r24, Y+37	; 0x25
    2272:	9e a1       	ldd	r25, Y+38	; 0x26
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2280:	18 16       	cp	r1, r24
    2282:	4c f5       	brge	.+82     	; 0x22d6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	6f a1       	ldd	r22, Y+39	; 0x27
    2286:	78 a5       	ldd	r23, Y+40	; 0x28
    2288:	89 a5       	ldd	r24, Y+41	; 0x29
    228a:	9a a5       	ldd	r25, Y+42	; 0x2a
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9a a3       	std	Y+34, r25	; 0x22
    22aa:	89 a3       	std	Y+33, r24	; 0x21
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <LCD_sendCommand+0x1c0>
    22ae:	88 ec       	ldi	r24, 0xC8	; 200
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	98 a3       	std	Y+32, r25	; 0x20
    22b4:	8f 8f       	std	Y+31, r24	; 0x1f
    22b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b8:	98 a1       	ldd	r25, Y+32	; 0x20
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_sendCommand+0x1ae>
    22be:	98 a3       	std	Y+32, r25	; 0x20
    22c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	89 a1       	ldd	r24, Y+33	; 0x21
    22c4:	9a a1       	ldd	r25, Y+34	; 0x22
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	9a a3       	std	Y+34, r25	; 0x22
    22ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22cc:	89 a1       	ldd	r24, Y+33	; 0x21
    22ce:	9a a1       	ldd	r25, Y+34	; 0x22
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	69 f7       	brne	.-38     	; 0x22ae <LCD_sendCommand+0x1a2>
    22d4:	14 c0       	rjmp	.+40     	; 0x22fe <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d6:	6b a1       	ldd	r22, Y+35	; 0x23
    22d8:	7c a1       	ldd	r23, Y+36	; 0x24
    22da:	8d a1       	ldd	r24, Y+37	; 0x25
    22dc:	9e a1       	ldd	r25, Y+38	; 0x26
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9a a3       	std	Y+34, r25	; 0x22
    22e8:	89 a3       	std	Y+33, r24	; 0x21
    22ea:	89 a1       	ldd	r24, Y+33	; 0x21
    22ec:	9a a1       	ldd	r25, Y+34	; 0x22
    22ee:	9e 8f       	std	Y+30, r25	; 0x1e
    22f0:	8d 8f       	std	Y+29, r24	; 0x1d
    22f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_sendCommand+0x1ea>
    22fa:	9e 8f       	std	Y+30, r25	; 0x1e
    22fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	69 ad       	ldd	r22, Y+57	; 0x39
    2302:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_writePort>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e8       	ldi	r26, 0x80	; 128
    230c:	bf e3       	ldi	r27, 0x3F	; 63
    230e:	89 8f       	std	Y+25, r24	; 0x19
    2310:	9a 8f       	std	Y+26, r25	; 0x1a
    2312:	ab 8f       	std	Y+27, r26	; 0x1b
    2314:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	69 8d       	ldd	r22, Y+25	; 0x19
    2318:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8d 8b       	std	Y+21, r24	; 0x15
    2330:	9e 8b       	std	Y+22, r25	; 0x16
    2332:	af 8b       	std	Y+23, r26	; 0x17
    2334:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2336:	6d 89       	ldd	r22, Y+21	; 0x15
    2338:	7e 89       	ldd	r23, Y+22	; 0x16
    233a:	8f 89       	ldd	r24, Y+23	; 0x17
    233c:	98 8d       	ldd	r25, Y+24	; 0x18
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_sendCommand+0x24c>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 8b       	std	Y+20, r25	; 0x14
    2354:	8b 8b       	std	Y+19, r24	; 0x13
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2358:	6d 89       	ldd	r22, Y+21	; 0x15
    235a:	7e 89       	ldd	r23, Y+22	; 0x16
    235c:	8f 89       	ldd	r24, Y+23	; 0x17
    235e:	98 8d       	ldd	r25, Y+24	; 0x18
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	69 8d       	ldd	r22, Y+25	; 0x19
    2372:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2374:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2376:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9c 8b       	std	Y+20, r25	; 0x14
    2396:	8b 8b       	std	Y+19, r24	; 0x13
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_sendCommand+0x2ac>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9a 8b       	std	Y+18, r25	; 0x12
    23a0:	89 8b       	std	Y+17, r24	; 0x11
    23a2:	89 89       	ldd	r24, Y+17	; 0x11
    23a4:	9a 89       	ldd	r25, Y+18	; 0x12
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_sendCommand+0x29a>
    23aa:	9a 8b       	std	Y+18, r25	; 0x12
    23ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9c 8b       	std	Y+20, r25	; 0x14
    23b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ba:	9c 89       	ldd	r25, Y+20	; 0x14
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_sendCommand+0x28e>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6d 89       	ldd	r22, Y+21	; 0x15
    23c4:	7e 89       	ldd	r23, Y+22	; 0x16
    23c6:	8f 89       	ldd	r24, Y+23	; 0x17
    23c8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	98 8b       	std	Y+16, r25	; 0x10
    23dc:	8f 87       	std	Y+15, r24	; 0x0f
    23de:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e0:	98 89       	ldd	r25, Y+16	; 0x10
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_sendCommand+0x2d6>
    23e6:	98 8b       	std	Y+16, r25	; 0x10
    23e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e8       	ldi	r26, 0x80	; 128
    23fa:	bf e3       	ldi	r27, 0x3F	; 63
    23fc:	8b 87       	std	Y+11, r24	; 0x0b
    23fe:	9c 87       	std	Y+12, r25	; 0x0c
    2400:	ad 87       	std	Y+13, r26	; 0x0d
    2402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a ef       	ldi	r20, 0xFA	; 250
    2412:	54 e4       	ldi	r21, 0x44	; 68
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8f 83       	std	Y+7, r24	; 0x07
    241e:	98 87       	std	Y+8, r25	; 0x08
    2420:	a9 87       	std	Y+9, r26	; 0x09
    2422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	2c f4       	brge	.+10     	; 0x2446 <LCD_sendCommand+0x33a>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	3f c0       	rjmp	.+126    	; 0x24c4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	4c f5       	brge	.+82     	; 0x24b0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <LCD_sendCommand+0x39a>
    2488:	88 ec       	ldi	r24, 0xC8	; 200
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_sendCommand+0x388>
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	69 f7       	brne	.-38     	; 0x2488 <LCD_sendCommand+0x37c>
    24ae:	14 c0       	rjmp	.+40     	; 0x24d8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_sendCommand+0x3c4>
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24d8:	e9 96       	adiw	r28, 0x39	; 57
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	e9 97       	sbiw	r28, 0x39	; 57
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e8       	ldi	r26, 0x80	; 128
    2510:	bf e3       	ldi	r27, 0x3F	; 63
    2512:	8d ab       	std	Y+53, r24	; 0x35
    2514:	9e ab       	std	Y+54, r25	; 0x36
    2516:	af ab       	std	Y+55, r26	; 0x37
    2518:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	6d a9       	ldd	r22, Y+53	; 0x35
    251c:	7e a9       	ldd	r23, Y+54	; 0x36
    251e:	8f a9       	ldd	r24, Y+55	; 0x37
    2520:	98 ad       	ldd	r25, Y+56	; 0x38
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4a ef       	ldi	r20, 0xFA	; 250
    2528:	54 e4       	ldi	r21, 0x44	; 68
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	89 ab       	std	Y+49, r24	; 0x31
    2534:	9a ab       	std	Y+50, r25	; 0x32
    2536:	ab ab       	std	Y+51, r26	; 0x33
    2538:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    253a:	69 a9       	ldd	r22, Y+49	; 0x31
    253c:	7a a9       	ldd	r23, Y+50	; 0x32
    253e:	8b a9       	ldd	r24, Y+51	; 0x33
    2540:	9c a9       	ldd	r25, Y+52	; 0x34
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254e:	88 23       	and	r24, r24
    2550:	2c f4       	brge	.+10     	; 0x255c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	98 ab       	std	Y+48, r25	; 0x30
    2558:	8f a7       	std	Y+47, r24	; 0x2f
    255a:	3f c0       	rjmp	.+126    	; 0x25da <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    255c:	69 a9       	ldd	r22, Y+49	; 0x31
    255e:	7a a9       	ldd	r23, Y+50	; 0x32
    2560:	8b a9       	ldd	r24, Y+51	; 0x33
    2562:	9c a9       	ldd	r25, Y+52	; 0x34
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	3f ef       	ldi	r19, 0xFF	; 255
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	57 e4       	ldi	r21, 0x47	; 71
    256c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2570:	18 16       	cp	r1, r24
    2572:	4c f5       	brge	.+82     	; 0x25c6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2574:	6d a9       	ldd	r22, Y+53	; 0x35
    2576:	7e a9       	ldd	r23, Y+54	; 0x36
    2578:	8f a9       	ldd	r24, Y+55	; 0x37
    257a:	98 ad       	ldd	r25, Y+56	; 0x38
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	98 ab       	std	Y+48, r25	; 0x30
    259a:	8f a7       	std	Y+47, r24	; 0x2f
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <LCD_displayCharacter+0xd2>
    259e:	88 ec       	ldi	r24, 0xC8	; 200
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9e a7       	std	Y+46, r25	; 0x2e
    25a4:	8d a7       	std	Y+45, r24	; 0x2d
    25a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <LCD_displayCharacter+0xc0>
    25ae:	9e a7       	std	Y+46, r25	; 0x2e
    25b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b4:	98 a9       	ldd	r25, Y+48	; 0x30
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	98 ab       	std	Y+48, r25	; 0x30
    25ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25be:	98 a9       	ldd	r25, Y+48	; 0x30
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	69 f7       	brne	.-38     	; 0x259e <LCD_displayCharacter+0xb4>
    25c4:	14 c0       	rjmp	.+40     	; 0x25ee <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c6:	69 a9       	ldd	r22, Y+49	; 0x31
    25c8:	7a a9       	ldd	r23, Y+50	; 0x32
    25ca:	8b a9       	ldd	r24, Y+51	; 0x33
    25cc:	9c a9       	ldd	r25, Y+52	; 0x34
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	98 ab       	std	Y+48, r25	; 0x30
    25d8:	8f a7       	std	Y+47, r24	; 0x2f
    25da:	8f a5       	ldd	r24, Y+47	; 0x2f
    25dc:	98 a9       	ldd	r25, Y+48	; 0x30
    25de:	9c a7       	std	Y+44, r25	; 0x2c
    25e0:	8b a7       	std	Y+43, r24	; 0x2b
    25e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_displayCharacter+0xfc>
    25ea:	9c a7       	std	Y+44, r25	; 0x2c
    25ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e8       	ldi	r26, 0x80	; 128
    25fe:	bf e3       	ldi	r27, 0x3F	; 63
    2600:	8f a3       	std	Y+39, r24	; 0x27
    2602:	98 a7       	std	Y+40, r25	; 0x28
    2604:	a9 a7       	std	Y+41, r26	; 0x29
    2606:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6f a1       	ldd	r22, Y+39	; 0x27
    260a:	78 a5       	ldd	r23, Y+40	; 0x28
    260c:	89 a5       	ldd	r24, Y+41	; 0x29
    260e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8b a3       	std	Y+35, r24	; 0x23
    2622:	9c a3       	std	Y+36, r25	; 0x24
    2624:	ad a3       	std	Y+37, r26	; 0x25
    2626:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2628:	6b a1       	ldd	r22, Y+35	; 0x23
    262a:	7c a1       	ldd	r23, Y+36	; 0x24
    262c:	8d a1       	ldd	r24, Y+37	; 0x25
    262e:	9e a1       	ldd	r25, Y+38	; 0x26
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9a a3       	std	Y+34, r25	; 0x22
    2646:	89 a3       	std	Y+33, r24	; 0x21
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    264a:	6b a1       	ldd	r22, Y+35	; 0x23
    264c:	7c a1       	ldd	r23, Y+36	; 0x24
    264e:	8d a1       	ldd	r24, Y+37	; 0x25
    2650:	9e a1       	ldd	r25, Y+38	; 0x26
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6f a1       	ldd	r22, Y+39	; 0x27
    2664:	78 a5       	ldd	r23, Y+40	; 0x28
    2666:	89 a5       	ldd	r24, Y+41	; 0x29
    2668:	9a a5       	ldd	r25, Y+42	; 0x2a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9a a3       	std	Y+34, r25	; 0x22
    2688:	89 a3       	std	Y+33, r24	; 0x21
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_displayCharacter+0x1c0>
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	98 a3       	std	Y+32, r25	; 0x20
    2692:	8f 8f       	std	Y+31, r24	; 0x1f
    2694:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2696:	98 a1       	ldd	r25, Y+32	; 0x20
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_displayCharacter+0x1ae>
    269c:	98 a3       	std	Y+32, r25	; 0x20
    269e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	89 a1       	ldd	r24, Y+33	; 0x21
    26a2:	9a a1       	ldd	r25, Y+34	; 0x22
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9a a3       	std	Y+34, r25	; 0x22
    26a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	89 a1       	ldd	r24, Y+33	; 0x21
    26ac:	9a a1       	ldd	r25, Y+34	; 0x22
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_displayCharacter+0x1a2>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6b a1       	ldd	r22, Y+35	; 0x23
    26b6:	7c a1       	ldd	r23, Y+36	; 0x24
    26b8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ba:	9e a1       	ldd	r25, Y+38	; 0x26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9a a3       	std	Y+34, r25	; 0x22
    26c6:	89 a3       	std	Y+33, r24	; 0x21
    26c8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ca:	9a a1       	ldd	r25, Y+34	; 0x22
    26cc:	9e 8f       	std	Y+30, r25	; 0x1e
    26ce:	8d 8f       	std	Y+29, r24	; 0x1d
    26d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_displayCharacter+0x1ea>
    26d8:	9e 8f       	std	Y+30, r25	; 0x1e
    26da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	69 ad       	ldd	r22, Y+57	; 0x39
    26e0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_writePort>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e8       	ldi	r26, 0x80	; 128
    26ea:	bf e3       	ldi	r27, 0x3F	; 63
    26ec:	89 8f       	std	Y+25, r24	; 0x19
    26ee:	9a 8f       	std	Y+26, r25	; 0x1a
    26f0:	ab 8f       	std	Y+27, r26	; 0x1b
    26f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	69 8d       	ldd	r22, Y+25	; 0x19
    26f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8d 8b       	std	Y+21, r24	; 0x15
    270e:	9e 8b       	std	Y+22, r25	; 0x16
    2710:	af 8b       	std	Y+23, r26	; 0x17
    2712:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2714:	6d 89       	ldd	r22, Y+21	; 0x15
    2716:	7e 89       	ldd	r23, Y+22	; 0x16
    2718:	8f 89       	ldd	r24, Y+23	; 0x17
    271a:	98 8d       	ldd	r25, Y+24	; 0x18
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9c 8b       	std	Y+20, r25	; 0x14
    2732:	8b 8b       	std	Y+19, r24	; 0x13
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2736:	6d 89       	ldd	r22, Y+21	; 0x15
    2738:	7e 89       	ldd	r23, Y+22	; 0x16
    273a:	8f 89       	ldd	r24, Y+23	; 0x17
    273c:	98 8d       	ldd	r25, Y+24	; 0x18
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	69 8d       	ldd	r22, Y+25	; 0x19
    2750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2754:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_displayCharacter+0x2ac>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9a 8b       	std	Y+18, r25	; 0x12
    277e:	89 8b       	std	Y+17, r24	; 0x11
    2780:	89 89       	ldd	r24, Y+17	; 0x11
    2782:	9a 89       	ldd	r25, Y+18	; 0x12
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_displayCharacter+0x29a>
    2788:	9a 8b       	std	Y+18, r25	; 0x12
    278a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8b 89       	ldd	r24, Y+19	; 0x13
    278e:	9c 89       	ldd	r25, Y+20	; 0x14
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8b 89       	ldd	r24, Y+19	; 0x13
    2798:	9c 89       	ldd	r25, Y+20	; 0x14
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <LCD_displayCharacter+0x28e>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6d 89       	ldd	r22, Y+21	; 0x15
    27a2:	7e 89       	ldd	r23, Y+22	; 0x16
    27a4:	8f 89       	ldd	r24, Y+23	; 0x17
    27a6:	98 8d       	ldd	r25, Y+24	; 0x18
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9c 8b       	std	Y+20, r25	; 0x14
    27b2:	8b 8b       	std	Y+19, r24	; 0x13
    27b4:	8b 89       	ldd	r24, Y+19	; 0x13
    27b6:	9c 89       	ldd	r25, Y+20	; 0x14
    27b8:	98 8b       	std	Y+16, r25	; 0x10
    27ba:	8f 87       	std	Y+15, r24	; 0x0f
    27bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27be:	98 89       	ldd	r25, Y+16	; 0x10
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_displayCharacter+0x2d6>
    27c4:	98 8b       	std	Y+16, r25	; 0x10
    27c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a0 e8       	ldi	r26, 0x80	; 128
    27d8:	bf e3       	ldi	r27, 0x3F	; 63
    27da:	8b 87       	std	Y+11, r24	; 0x0b
    27dc:	9c 87       	std	Y+12, r25	; 0x0c
    27de:	ad 87       	std	Y+13, r26	; 0x0d
    27e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a ef       	ldi	r20, 0xFA	; 250
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8f 83       	std	Y+7, r24	; 0x07
    27fc:	98 87       	std	Y+8, r25	; 0x08
    27fe:	a9 87       	std	Y+9, r26	; 0x09
    2800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	2c f4       	brge	.+10     	; 0x2824 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	3f c0       	rjmp	.+126    	; 0x28a2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	4c f5       	brge	.+82     	; 0x288e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	6b 85       	ldd	r22, Y+11	; 0x0b
    283e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2840:	8d 85       	ldd	r24, Y+13	; 0x0d
    2842:	9e 85       	ldd	r25, Y+14	; 0x0e
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <LCD_displayCharacter+0x39a>
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	8b 83       	std	Y+3, r24	; 0x03
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_displayCharacter+0x388>
    2876:	9c 83       	std	Y+4, r25	; 0x04
    2878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <LCD_displayCharacter+0x37c>
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_displayCharacter+0x3c4>
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28b6:	e9 96       	adiw	r28, 0x39	; 57
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <LCD_displayString+0x6>
    28ce:	0f 92       	push	r0
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	9b 83       	std	Y+3, r25	; 0x03
    28d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28d8:	19 82       	std	Y+1, r1	; 0x01
    28da:	0e c0       	rjmp	.+28     	; 0x28f8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	fc 01       	movw	r30, r24
    28e8:	e2 0f       	add	r30, r18
    28ea:	f3 1f       	adc	r31, r19
    28ec:	80 81       	ld	r24, Z
    28ee:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_displayCharacter>
		i++;
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	fc 01       	movw	r30, r24
    2904:	e2 0f       	add	r30, r18
    2906:	f3 1f       	adc	r31, r19
    2908:	80 81       	ld	r24, Z
    290a:	88 23       	and	r24, r24
    290c:	39 f7       	brne	.-50     	; 0x28dc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	00 d0       	rcall	.+0      	; 0x2920 <LCD_moveCursor+0x6>
    2920:	00 d0       	rcall	.+0      	; 0x2922 <LCD_moveCursor+0x8>
    2922:	0f 92       	push	r0
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	8a 83       	std	Y+2, r24	; 0x02
    292a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	3d 83       	std	Y+5, r19	; 0x05
    2934:	2c 83       	std	Y+4, r18	; 0x04
    2936:	8c 81       	ldd	r24, Y+4	; 0x04
    2938:	9d 81       	ldd	r25, Y+5	; 0x05
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	91 05       	cpc	r25, r1
    293e:	c1 f0       	breq	.+48     	; 0x2970 <LCD_moveCursor+0x56>
    2940:	2c 81       	ldd	r18, Y+4	; 0x04
    2942:	3d 81       	ldd	r19, Y+5	; 0x05
    2944:	22 30       	cpi	r18, 0x02	; 2
    2946:	31 05       	cpc	r19, r1
    2948:	2c f4       	brge	.+10     	; 0x2954 <LCD_moveCursor+0x3a>
    294a:	8c 81       	ldd	r24, Y+4	; 0x04
    294c:	9d 81       	ldd	r25, Y+5	; 0x05
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	61 f0       	breq	.+24     	; 0x296a <LCD_moveCursor+0x50>
    2952:	19 c0       	rjmp	.+50     	; 0x2986 <LCD_moveCursor+0x6c>
    2954:	2c 81       	ldd	r18, Y+4	; 0x04
    2956:	3d 81       	ldd	r19, Y+5	; 0x05
    2958:	22 30       	cpi	r18, 0x02	; 2
    295a:	31 05       	cpc	r19, r1
    295c:	69 f0       	breq	.+26     	; 0x2978 <LCD_moveCursor+0x5e>
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	9d 81       	ldd	r25, Y+5	; 0x05
    2962:	83 30       	cpi	r24, 0x03	; 3
    2964:	91 05       	cpc	r25, r1
    2966:	61 f0       	breq	.+24     	; 0x2980 <LCD_moveCursor+0x66>
    2968:	0e c0       	rjmp	.+28     	; 0x2986 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	0b c0       	rjmp	.+22     	; 0x2986 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	80 5c       	subi	r24, 0xC0	; 192
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	07 c0       	rjmp	.+14     	; 0x2986 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	80 5f       	subi	r24, 0xF0	; 240
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	03 c0       	rjmp	.+6      	; 0x2986 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	80 5b       	subi	r24, 0xB0	; 176
    2984:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	80 68       	ori	r24, 0x80	; 128
    298a:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_sendCommand>
}
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <LCD_displayStringRowColumn+0x6>
    29a4:	00 d0       	rcall	.+0      	; 0x29a6 <LCD_displayStringRowColumn+0x8>
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	6a 83       	std	Y+2, r22	; 0x02
    29ae:	5c 83       	std	Y+4, r21	; 0x04
    29b0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	6a 81       	ldd	r22, Y+2	; 0x02
    29b6:	0e 94 8d 14 	call	0x291a	; 0x291a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	62 97       	sbiw	r28, 0x12	; 18
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	9a 8b       	std	Y+18, r25	; 0x12
    29e6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29e8:	89 89       	ldd	r24, Y+17	; 0x11
    29ea:	9a 89       	ldd	r25, Y+18	; 0x12
    29ec:	9e 01       	movw	r18, r28
    29ee:	2f 5f       	subi	r18, 0xFF	; 255
    29f0:	3f 4f       	sbci	r19, 0xFF	; 255
    29f2:	b9 01       	movw	r22, r18
    29f4:	4a e0       	ldi	r20, 0x0A	; 10
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	0e 94 af 18 	call	0x315e	; 0x315e <itoa>
   LCD_displayString(buff); /* Display the string */
    29fc:	ce 01       	movw	r24, r28
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_displayString>
}
    2a04:	62 96       	adiw	r28, 0x12	; 18
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_sendCommand>
}
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <__vector_7>:
/*******************************************************************************
 *                              ISR                                    *
 *******************************************************************************/
/*ISR FOR COMPORE MODE  */
ISR(TIMER1_COMPA_vect)
{
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	2f 93       	push	r18
    2a36:	3f 93       	push	r19
    2a38:	4f 93       	push	r20
    2a3a:	5f 93       	push	r21
    2a3c:	6f 93       	push	r22
    2a3e:	7f 93       	push	r23
    2a40:	8f 93       	push	r24
    2a42:	9f 93       	push	r25
    2a44:	af 93       	push	r26
    2a46:	bf 93       	push	r27
    2a48:	ef 93       	push	r30
    2a4a:	ff 93       	push	r31
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2a54:	80 91 30 01 	lds	r24, 0x0130
    2a58:	90 91 31 01 	lds	r25, 0x0131
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	29 f0       	breq	.+10     	; 0x2a6a <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    2a60:	e0 91 30 01 	lds	r30, 0x0130
    2a64:	f0 91 31 01 	lds	r31, 0x0131
    2a68:	09 95       	icall
	}
}
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	ff 91       	pop	r31
    2a70:	ef 91       	pop	r30
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	7f 91       	pop	r23
    2a7c:	6f 91       	pop	r22
    2a7e:	5f 91       	pop	r21
    2a80:	4f 91       	pop	r20
    2a82:	3f 91       	pop	r19
    2a84:	2f 91       	pop	r18
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	0f 90       	pop	r0
    2a8c:	1f 90       	pop	r1
    2a8e:	18 95       	reti

00002a90 <__vector_9>:

/*ISR FOR OVERFLOW MODE  */
ISR(TIMER1_OVF_vect)
{
    2a90:	1f 92       	push	r1
    2a92:	0f 92       	push	r0
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	0f 92       	push	r0
    2a98:	11 24       	eor	r1, r1
    2a9a:	2f 93       	push	r18
    2a9c:	3f 93       	push	r19
    2a9e:	4f 93       	push	r20
    2aa0:	5f 93       	push	r21
    2aa2:	6f 93       	push	r22
    2aa4:	7f 93       	push	r23
    2aa6:	8f 93       	push	r24
    2aa8:	9f 93       	push	r25
    2aaa:	af 93       	push	r26
    2aac:	bf 93       	push	r27
    2aae:	ef 93       	push	r30
    2ab0:	ff 93       	push	r31
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2aba:	80 91 30 01 	lds	r24, 0x0130
    2abe:	90 91 31 01 	lds	r25, 0x0131
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	29 f0       	breq	.+10     	; 0x2ad0 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    2ac6:	e0 91 30 01 	lds	r30, 0x0130
    2aca:	f0 91 31 01 	lds	r31, 0x0131
    2ace:	09 95       	icall
	}

}
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	ff 91       	pop	r31
    2ad6:	ef 91       	pop	r30
    2ad8:	bf 91       	pop	r27
    2ada:	af 91       	pop	r26
    2adc:	9f 91       	pop	r25
    2ade:	8f 91       	pop	r24
    2ae0:	7f 91       	pop	r23
    2ae2:	6f 91       	pop	r22
    2ae4:	5f 91       	pop	r21
    2ae6:	4f 91       	pop	r20
    2ae8:	3f 91       	pop	r19
    2aea:	2f 91       	pop	r18
    2aec:	0f 90       	pop	r0
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	0f 90       	pop	r0
    2af2:	1f 90       	pop	r1
    2af4:	18 95       	reti

00002af6 <Timer1_init>:
 *******************************************************************************/

/* Description
⮚ Function to initialize the Timer driver*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <Timer1_init+0x6>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <Timer1_init+0x8>
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9a 83       	std	Y+2, r25	; 0x02
    2b04:	89 83       	std	Y+1, r24	; 0x01
	/* TCCR1A SETTING
	 * Normal port operation, OC1A/OC1B disconnected COM1A1/COM1B1=0 and COM1A0/COM1B0=0
	 * FOC1A=1 FOC1B=0 for non-PWM mode*/
	TCCR1A=0x08;
    2b06:	ef e4       	ldi	r30, 0x4F	; 79
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	88 e0       	ldi	r24, 0x08	; 8
    2b0c:	80 83       	st	Z, r24

	//Select the prescaler
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2b0e:	ae e4       	ldi	r26, 0x4E	; 78
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	ee e4       	ldi	r30, 0x4E	; 78
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	98 2f       	mov	r25, r24
    2b1a:	98 7f       	andi	r25, 0xF8	; 248
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	84 81       	ldd	r24, Z+4	; 0x04
    2b22:	89 2b       	or	r24, r25
    2b24:	8c 93       	st	X, r24

	//Select the TIMER1 MODE
	switch(Config_Ptr->mode)
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	85 81       	ldd	r24, Z+5	; 0x05
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	3c 83       	std	Y+4, r19	; 0x04
    2b32:	2b 83       	std	Y+3, r18	; 0x03
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	31 f0       	breq	.+12     	; 0x2b48 <Timer1_init+0x52>
    2b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b40:	24 30       	cpi	r18, 0x04	; 4
    2b42:	31 05       	cpc	r19, r1
    2b44:	71 f1       	breq	.+92     	; 0x2ba2 <Timer1_init+0xac>
    2b46:	5d c0       	rjmp	.+186    	; 0x2c02 <Timer1_init+0x10c>
	{
	case NORMAL_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    2b48:	af e4       	ldi	r26, 0x4F	; 79
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	ef e4       	ldi	r30, 0x4F	; 79
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	8e 7f       	andi	r24, 0xFE	; 254
    2b54:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    2b56:	af e4       	ldi	r26, 0x4F	; 79
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	ef e4       	ldi	r30, 0x4F	; 79
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	8d 7f       	andi	r24, 0xFD	; 253
    2b62:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    2b64:	ae e4       	ldi	r26, 0x4E	; 78
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	ee e4       	ldi	r30, 0x4E	; 78
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	87 7f       	andi	r24, 0xF7	; 247
    2b70:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    2b72:	ae e4       	ldi	r26, 0x4E	; 78
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	ee e4       	ldi	r30, 0x4E	; 78
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	8f 7e       	andi	r24, 0xEF	; 239
    2b7e:	8c 93       	st	X, r24
		//put the initial value in TCNT1
		TCNT1=Config_Ptr->initial_value;
    2b80:	ac e4       	ldi	r26, 0x4C	; 76
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e9 81       	ldd	r30, Y+1	; 0x01
    2b86:	fa 81       	ldd	r31, Y+2	; 0x02
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	11 96       	adiw	r26, 0x01	; 1
    2b8e:	9c 93       	st	X, r25
    2b90:	8e 93       	st	-X, r24
		//Enable Overflow Interrupt
		SET_BIT(TIMSK,TOIE1);
    2b92:	a9 e5       	ldi	r26, 0x59	; 89
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e9 e5       	ldi	r30, 0x59	; 89
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	84 60       	ori	r24, 0x04	; 4
    2b9e:	8c 93       	st	X, r24
    2ba0:	30 c0       	rjmp	.+96     	; 0x2c02 <Timer1_init+0x10c>
		break;

	case COMPARE_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    2ba2:	af e4       	ldi	r26, 0x4F	; 79
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	ef e4       	ldi	r30, 0x4F	; 79
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	8e 7f       	andi	r24, 0xFE	; 254
    2bae:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    2bb0:	af e4       	ldi	r26, 0x4F	; 79
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	ef e4       	ldi	r30, 0x4F	; 79
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	8d 7f       	andi	r24, 0xFD	; 253
    2bbc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    2bbe:	ae e4       	ldi	r26, 0x4E	; 78
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	ee e4       	ldi	r30, 0x4E	; 78
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 60       	ori	r24, 0x08	; 8
    2bca:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    2bcc:	ae e4       	ldi	r26, 0x4E	; 78
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	ee e4       	ldi	r30, 0x4E	; 78
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8f 7e       	andi	r24, 0xEF	; 239
    2bd8:	8c 93       	st	X, r24
		//put the compare value in OCR1A
		TCNT1 = 0;
    2bda:	ec e4       	ldi	r30, 0x4C	; 76
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	11 82       	std	Z+1, r1	; 0x01
    2be0:	10 82       	st	Z, r1
		OCR1A=Config_Ptr->compare_value;
    2be2:	aa e4       	ldi	r26, 0x4A	; 74
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	e9 81       	ldd	r30, Y+1	; 0x01
    2be8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	11 96       	adiw	r26, 0x01	; 1
    2bf0:	9c 93       	st	X, r25
    2bf2:	8e 93       	st	-X, r24
		//Enable Output Compare A Match Interrupt
		SET_BIT(TIMSK,OCIE1A);
    2bf4:	a9 e5       	ldi	r26, 0x59	; 89
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e9 e5       	ldi	r30, 0x59	; 89
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	80 61       	ori	r24, 0x10	; 16
    2c00:	8c 93       	st	X, r24
		break;
	}
}
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <Timer1_deInit>:

/*Description
⮚ Function to disable the Timer1.*/
void Timer1_deInit(void)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2c18:	ef e4       	ldi	r30, 0x4F	; 79
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	10 82       	st	Z, r1
	TCCR1B=0;
    2c1e:	ee e4       	ldi	r30, 0x4E	; 78
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	10 82       	st	Z, r1
	OCR1A=0;
    2c24:	ea e4       	ldi	r30, 0x4A	; 74
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	11 82       	std	Z+1, r1	; 0x01
    2c2a:	10 82       	st	Z, r1
	TCNT1=0;
    2c2c:	ec e4       	ldi	r30, 0x4C	; 76
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	11 82       	std	Z+1, r1	; 0x01
    2c32:	10 82       	st	Z, r1
	TIMSK=TIMSK&0xC3;
    2c34:	a9 e5       	ldi	r26, 0x59	; 89
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e9 e5       	ldi	r30, 0x59	; 89
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	83 7c       	andi	r24, 0xC3	; 195
    2c40:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2c42:	10 92 31 01 	sts	0x0131, r1
    2c46:	10 92 30 01 	sts	0x0130, r1
}
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <Timer1_setCallBack>:

/*Description
⮚ Function to set the Call Back function address.*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <Timer1_setCallBack+0x6>
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	90 93 31 01 	sts	0x0131, r25
    2c66:	80 93 30 01 	sts	0x0130, r24
}
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	28 97       	sbiw	r28, 0x08	; 8
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2c8c:	1a 82       	std	Y+2, r1	; 0x02
    2c8e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c90:	eb e2       	ldi	r30, 0x2B	; 43
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	82 e0       	ldi	r24, 0x02	; 2
    2c96:	80 83       	st	Z, r24
	/************************** UCSRB Description *************************
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c98:	ea e2       	ldi	r30, 0x2A	; 42
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	88 e1       	ldi	r24, 0x18	; 24
    2c9e:	80 83       	st	Z, r24

	/* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    2ca0:	a0 e4       	ldi	r26, 0x40	; 64
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e0 e4       	ldi	r30, 0x40	; 64
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	80 68       	ori	r24, 0x80	; 128
    2cac:	8c 93       	st	X, r24

	/* when USBS= 0 One stop bit
	   when USBS= 1 TWO stop bits
	 */
	if(Config_Ptr->stop_bit)
    2cae:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	88 23       	and	r24, r24
    2cb6:	41 f0       	breq	.+16     	; 0x2cc8 <UART_init+0x54>
		SET_BIT(UCSRC,USBS);
    2cb8:	a0 e4       	ldi	r26, 0x40	; 64
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e0 e4       	ldi	r30, 0x40	; 64
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	88 60       	ori	r24, 0x08	; 8
    2cc4:	8c 93       	st	X, r24
    2cc6:	07 c0       	rjmp	.+14     	; 0x2cd6 <UART_init+0x62>
	else
		CLEAR_BIT(UCSRC,USBS);
    2cc8:	a0 e4       	ldi	r26, 0x40	; 64
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e0 e4       	ldi	r30, 0x40	; 64
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	87 7f       	andi	r24, 0xF7	; 247
    2cd4:	8c 93       	st	X, r24

	/* when UPM0= 0 and UPM1=0 DISABLED
	 * when UPM0= 0 and UPM1=1 EVEN_PARITY
	 * when UPM0= 1 and UPM1=1 ODD_PARITY
	 */
	switch(Config_Ptr->parity)
    2cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cda:	81 81       	ldd	r24, Z+1	; 0x01
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	38 87       	std	Y+8, r19	; 0x08
    2ce2:	2f 83       	std	Y+7, r18	; 0x07
    2ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce6:	98 85       	ldd	r25, Y+8	; 0x08
    2ce8:	82 30       	cpi	r24, 0x02	; 2
    2cea:	91 05       	cpc	r25, r1
    2cec:	c1 f0       	breq	.+48     	; 0x2d1e <UART_init+0xaa>
    2cee:	2f 81       	ldd	r18, Y+7	; 0x07
    2cf0:	38 85       	ldd	r19, Y+8	; 0x08
    2cf2:	23 30       	cpi	r18, 0x03	; 3
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	11 f1       	breq	.+68     	; 0x2d3c <UART_init+0xc8>
    2cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfa:	98 85       	ldd	r25, Y+8	; 0x08
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	61 f5       	brne	.+88     	; 0x2d58 <UART_init+0xe4>
	{
	case DISABLED:
		CLEAR_BIT(UCSRC,UPM0);
    2d00:	a0 e4       	ldi	r26, 0x40	; 64
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e0 e4       	ldi	r30, 0x40	; 64
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	8f 7e       	andi	r24, 0xEF	; 239
    2d0c:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    2d0e:	a0 e4       	ldi	r26, 0x40	; 64
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e0 e4       	ldi	r30, 0x40	; 64
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8f 7d       	andi	r24, 0xDF	; 223
    2d1a:	8c 93       	st	X, r24
    2d1c:	1d c0       	rjmp	.+58     	; 0x2d58 <UART_init+0xe4>
		break;
	case EVEN_PARITY:
		SET_BIT(UCSRC,UPM0);
    2d1e:	a0 e4       	ldi	r26, 0x40	; 64
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	e0 e4       	ldi	r30, 0x40	; 64
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	80 61       	ori	r24, 0x10	; 16
    2d2a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    2d2c:	a0 e4       	ldi	r26, 0x40	; 64
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e0 e4       	ldi	r30, 0x40	; 64
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	8f 7d       	andi	r24, 0xDF	; 223
    2d38:	8c 93       	st	X, r24
    2d3a:	0e c0       	rjmp	.+28     	; 0x2d58 <UART_init+0xe4>
		break;
	case ODD_PARITY:
		SET_BIT(UCSRC,UPM0);
    2d3c:	a0 e4       	ldi	r26, 0x40	; 64
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	e0 e4       	ldi	r30, 0x40	; 64
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	80 61       	ori	r24, 0x10	; 16
    2d48:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    2d4a:	a0 e4       	ldi	r26, 0x40	; 64
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e0 e4       	ldi	r30, 0x40	; 64
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	80 62       	ori	r24, 0x20	; 32
    2d56:	8c 93       	st	X, r24
	   when UCSZ0= 1 , UCSZ1=0 ,and UCSZ2=0  6_bits
	   when UCSZ0= 0 , UCSZ1=1 ,and UCSZ2=0  7_bits
	   when UCSZ0= 1 , UCSZ1=1 ,and UCSZ2=0  8_bits
	   when UCSZ0= 1 , UCSZ1=1 ,and UCSZ2=1  9_bits
	 */
	switch(Config_Ptr->bit_data)
    2d58:	eb 81       	ldd	r30, Y+3	; 0x03
    2d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d5c:	80 81       	ld	r24, Z
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	3e 83       	std	Y+6, r19	; 0x06
    2d64:	2d 83       	std	Y+5, r18	; 0x05
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6a:	82 30       	cpi	r24, 0x02	; 2
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <UART_init+0xfe>
    2d70:	48 c0       	rjmp	.+144    	; 0x2e02 <UART_init+0x18e>
    2d72:	2d 81       	ldd	r18, Y+5	; 0x05
    2d74:	3e 81       	ldd	r19, Y+6	; 0x06
    2d76:	23 30       	cpi	r18, 0x03	; 3
    2d78:	31 05       	cpc	r19, r1
    2d7a:	54 f4       	brge	.+20     	; 0x2d90 <UART_init+0x11c>
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	99 f0       	breq	.+38     	; 0x2daa <UART_init+0x136>
    2d84:	2d 81       	ldd	r18, Y+5	; 0x05
    2d86:	3e 81       	ldd	r19, Y+6	; 0x06
    2d88:	21 30       	cpi	r18, 0x01	; 1
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	21 f1       	breq	.+72     	; 0x2dd6 <UART_init+0x162>
    2d8e:	7a c0       	rjmp	.+244    	; 0x2e84 <UART_init+0x210>
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	83 30       	cpi	r24, 0x03	; 3
    2d96:	91 05       	cpc	r25, r1
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <UART_init+0x128>
    2d9a:	49 c0       	rjmp	.+146    	; 0x2e2e <UART_init+0x1ba>
    2d9c:	2d 81       	ldd	r18, Y+5	; 0x05
    2d9e:	3e 81       	ldd	r19, Y+6	; 0x06
    2da0:	27 30       	cpi	r18, 0x07	; 7
    2da2:	31 05       	cpc	r19, r1
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <UART_init+0x134>
    2da6:	59 c0       	rjmp	.+178    	; 0x2e5a <UART_init+0x1e6>
    2da8:	6d c0       	rjmp	.+218    	; 0x2e84 <UART_init+0x210>
	{
	case FIVE_BITS:
		CLEAR_BIT(UCSRC,UCSZ0);
    2daa:	a0 e4       	ldi	r26, 0x40	; 64
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e0 e4       	ldi	r30, 0x40	; 64
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	8d 7f       	andi	r24, 0xFD	; 253
    2db6:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    2db8:	a0 e4       	ldi	r26, 0x40	; 64
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e0 e4       	ldi	r30, 0x40	; 64
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8b 7f       	andi	r24, 0xFB	; 251
    2dc4:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    2dc6:	aa e2       	ldi	r26, 0x2A	; 42
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	ea e2       	ldi	r30, 0x2A	; 42
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	8b 7f       	andi	r24, 0xFB	; 251
    2dd2:	8c 93       	st	X, r24
    2dd4:	57 c0       	rjmp	.+174    	; 0x2e84 <UART_init+0x210>
		break;
	case SIX_BITS:
		SET_BIT(UCSRC,UCSZ0);
    2dd6:	a0 e4       	ldi	r26, 0x40	; 64
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	e0 e4       	ldi	r30, 0x40	; 64
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	82 60       	ori	r24, 0x02	; 2
    2de2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    2de4:	a0 e4       	ldi	r26, 0x40	; 64
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e0 e4       	ldi	r30, 0x40	; 64
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	8b 7f       	andi	r24, 0xFB	; 251
    2df0:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    2df2:	aa e2       	ldi	r26, 0x2A	; 42
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	ea e2       	ldi	r30, 0x2A	; 42
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	8b 7f       	andi	r24, 0xFB	; 251
    2dfe:	8c 93       	st	X, r24
    2e00:	41 c0       	rjmp	.+130    	; 0x2e84 <UART_init+0x210>
		break;
	case SEVEN_BITS:
		CLEAR_BIT(UCSRC,UCSZ0);
    2e02:	a0 e4       	ldi	r26, 0x40	; 64
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e0 e4       	ldi	r30, 0x40	; 64
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	8d 7f       	andi	r24, 0xFD	; 253
    2e0e:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2e10:	a0 e4       	ldi	r26, 0x40	; 64
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e0 e4       	ldi	r30, 0x40	; 64
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	84 60       	ori	r24, 0x04	; 4
    2e1c:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    2e1e:	aa e2       	ldi	r26, 0x2A	; 42
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	ea e2       	ldi	r30, 0x2A	; 42
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	8b 7f       	andi	r24, 0xFB	; 251
    2e2a:	8c 93       	st	X, r24
    2e2c:	2b c0       	rjmp	.+86     	; 0x2e84 <UART_init+0x210>
		break;
	case EIGHT_BITS:
		SET_BIT(UCSRC,UCSZ0);
    2e2e:	a0 e4       	ldi	r26, 0x40	; 64
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	e0 e4       	ldi	r30, 0x40	; 64
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	82 60       	ori	r24, 0x02	; 2
    2e3a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2e3c:	a0 e4       	ldi	r26, 0x40	; 64
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e0 e4       	ldi	r30, 0x40	; 64
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	84 60       	ori	r24, 0x04	; 4
    2e48:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    2e4a:	aa e2       	ldi	r26, 0x2A	; 42
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	ea e2       	ldi	r30, 0x2A	; 42
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	8b 7f       	andi	r24, 0xFB	; 251
    2e56:	8c 93       	st	X, r24
    2e58:	15 c0       	rjmp	.+42     	; 0x2e84 <UART_init+0x210>
		break;
	case NINE_BITS:
		SET_BIT(UCSRC,UCSZ0);
    2e5a:	a0 e4       	ldi	r26, 0x40	; 64
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	e0 e4       	ldi	r30, 0x40	; 64
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	82 60       	ori	r24, 0x02	; 2
    2e66:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2e68:	a0 e4       	ldi	r26, 0x40	; 64
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	e0 e4       	ldi	r30, 0x40	; 64
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	84 60       	ori	r24, 0x04	; 4
    2e74:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    2e76:	aa e2       	ldi	r26, 0x2A	; 42
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	ea e2       	ldi	r30, 0x2A	; 42
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	84 60       	ori	r24, 0x04	; 4
    2e82:	8c 93       	st	X, r24
		break;
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2e84:	eb 81       	ldd	r30, Y+3	; 0x03
    2e86:	fc 81       	ldd	r31, Y+4	; 0x04
    2e88:	83 81       	ldd	r24, Z+3	; 0x03
    2e8a:	94 81       	ldd	r25, Z+4	; 0x04
    2e8c:	a5 81       	ldd	r26, Z+5	; 0x05
    2e8e:	b6 81       	ldd	r27, Z+6	; 0x06
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	aa 1f       	adc	r26, r26
    2e96:	bb 1f       	adc	r27, r27
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	aa 1f       	adc	r26, r26
    2e9e:	bb 1f       	adc	r27, r27
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	aa 1f       	adc	r26, r26
    2ea6:	bb 1f       	adc	r27, r27
    2ea8:	9c 01       	movw	r18, r24
    2eaa:	ad 01       	movw	r20, r26
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	92 e1       	ldi	r25, 0x12	; 18
    2eb0:	aa e7       	ldi	r26, 0x7A	; 122
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodsi4>
    2ebc:	da 01       	movw	r26, r20
    2ebe:	c9 01       	movw	r24, r18
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2ec6:	e0 e4       	ldi	r30, 0x40	; 64
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	89 2f       	mov	r24, r25
    2ed0:	99 27       	eor	r25, r25
    2ed2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ed4:	e9 e2       	ldi	r30, 0x29	; 41
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	80 83       	st	Z, r24
}
    2edc:	28 96       	adiw	r28, 0x08	; 8
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	0f 92       	push	r0
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2efa:	eb e2       	ldi	r30, 0x2B	; 43
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	88 2f       	mov	r24, r24
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	80 72       	andi	r24, 0x20	; 32
    2f06:	90 70       	andi	r25, 0x00	; 0
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	b9 f3       	breq	.-18     	; 0x2efa <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f0c:	ec e2       	ldi	r30, 0x2C	; 44
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2f14:	0f 90       	pop	r0
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <UART_sendArrayOfByte>:
/*
 * Description :
 * Functional responsible for send array of byte to another UART device.
 */
void UART_sendArrayOfByte(const uint8 *data,uint8 length)
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <UART_sendArrayOfByte+0x6>
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <UART_sendArrayOfByte+0x8>
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	9b 83       	std	Y+3, r25	; 0x03
    2f2a:	8a 83       	std	Y+2, r24	; 0x02
    2f2c:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0 ; i<length;i++)
    2f2e:	19 82       	std	Y+1, r1	; 0x01
    2f30:	0e c0       	rjmp	.+28     	; 0x2f4e <UART_sendArrayOfByte+0x32>
	{
		UART_sendByte(data[i]);
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	e2 0f       	add	r30, r18
    2f40:	f3 1f       	adc	r31, r19
    2f42:	80 81       	ld	r24, Z
    2f44:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
 * Description :
 * Functional responsible for send array of byte to another UART device.
 */
void UART_sendArrayOfByte(const uint8 *data,uint8 length)
{
	for(uint8 i=0 ; i<length;i++)
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	8f 5f       	subi	r24, 0xFF	; 255
    2f4c:	89 83       	std	Y+1, r24	; 0x01
    2f4e:	99 81       	ldd	r25, Y+1	; 0x01
    2f50:	8c 81       	ldd	r24, Y+4	; 0x04
    2f52:	98 17       	cp	r25, r24
    2f54:	70 f3       	brcs	.-36     	; 0x2f32 <UART_sendArrayOfByte+0x16>
	{
		UART_sendByte(data[i]);
	}
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f6c:	eb e2       	ldi	r30, 0x2B	; 43
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	88 23       	and	r24, r24
    2f74:	dc f7       	brge	.-10     	; 0x2f6c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2f76:	ec e2       	ldi	r30, 0x2C	; 44
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
}
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <UART_recieveArrayOfByte>:
/*
 * Description :
 * Functional responsible for receive array of bytes from another UART device.
 */
void UART_recieveArrayOfByte(uint8 *data,uint8 length)
{
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <UART_recieveArrayOfByte+0xa>
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <UART_recieveArrayOfByte+0xc>
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	9b 83       	std	Y+3, r25	; 0x03
    2f94:	8a 83       	std	Y+2, r24	; 0x02
    2f96:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0 ; i<length;i++)
    2f98:	19 82       	std	Y+1, r1	; 0x01
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <UART_recieveArrayOfByte+0x38>
	{
		data[i]=UART_recieveByte();
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa6:	8c 01       	movw	r16, r24
    2fa8:	02 0f       	add	r16, r18
    2faa:	13 1f       	adc	r17, r19
    2fac:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	80 83       	st	Z, r24
 * Description :
 * Functional responsible for receive array of bytes from another UART device.
 */
void UART_recieveArrayOfByte(uint8 *data,uint8 length)
{
	for(uint8 i=0 ; i<length;i++)
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	8f 5f       	subi	r24, 0xFF	; 255
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	99 81       	ldd	r25, Y+1	; 0x01
    2fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbe:	98 17       	cp	r25, r24
    2fc0:	68 f3       	brcs	.-38     	; 0x2f9c <UART_recieveArrayOfByte+0x1a>
	{
		data[i]=UART_recieveByte();
	}
}
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	08 95       	ret

00002fd4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <UART_sendString+0x6>
    2fda:	0f 92       	push	r0
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	9b 83       	std	Y+3, r25	; 0x03
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fe4:	19 82       	std	Y+1, r1	; 0x01
    2fe6:	0e c0       	rjmp	.+28     	; 0x3004 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e2 0f       	add	r30, r18
    2ff6:	f3 1f       	adc	r31, r19
    2ff8:	80 81       	ld	r24, Z
    2ffa:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_sendByte>
		i++;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	8f 5f       	subi	r24, 0xFF	; 255
    3002:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	28 2f       	mov	r18, r24
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	fc 01       	movw	r30, r24
    3010:	e2 0f       	add	r30, r18
    3012:	f3 1f       	adc	r31, r19
    3014:	80 81       	ld	r24, Z
    3016:	88 23       	and	r24, r24
    3018:	39 f7       	brne	.-50     	; 0x2fe8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	00 d0       	rcall	.+0      	; 0x3030 <UART_receiveString+0xa>
    3030:	0f 92       	push	r0
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	9b 83       	std	Y+3, r25	; 0x03
    3038:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    303a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	9b 81       	ldd	r25, Y+3	; 0x03
    3046:	8c 01       	movw	r16, r24
    3048:	02 0f       	add	r16, r18
    304a:	13 1f       	adc	r17, r19
    304c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    3050:	f8 01       	movw	r30, r16
    3052:	80 83       	st	Z, r24
    3054:	0f c0       	rjmp	.+30     	; 0x3074 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	8a 81       	ldd	r24, Y+2	; 0x02
    3064:	9b 81       	ldd	r25, Y+3	; 0x03
    3066:	8c 01       	movw	r16, r24
    3068:	02 0f       	add	r16, r18
    306a:	13 1f       	adc	r17, r19
    306c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <UART_recieveByte>
    3070:	f8 01       	movw	r30, r16
    3072:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	9b 81       	ldd	r25, Y+3	; 0x03
    307e:	fc 01       	movw	r30, r24
    3080:	e2 0f       	add	r30, r18
    3082:	f3 1f       	adc	r31, r19
    3084:	80 81       	ld	r24, Z
    3086:	83 32       	cpi	r24, 0x23	; 35
    3088:	31 f7       	brne	.-52     	; 0x3056 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	fc 01       	movw	r30, r24
    3096:	e2 0f       	add	r30, r18
    3098:	f3 1f       	adc	r31, r19
    309a:	10 82       	st	Z, r1
}
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	08 95       	ret

000030ac <__udivmodsi4>:
    30ac:	a1 e2       	ldi	r26, 0x21	; 33
    30ae:	1a 2e       	mov	r1, r26
    30b0:	aa 1b       	sub	r26, r26
    30b2:	bb 1b       	sub	r27, r27
    30b4:	fd 01       	movw	r30, r26
    30b6:	0d c0       	rjmp	.+26     	; 0x30d2 <__udivmodsi4_ep>

000030b8 <__udivmodsi4_loop>:
    30b8:	aa 1f       	adc	r26, r26
    30ba:	bb 1f       	adc	r27, r27
    30bc:	ee 1f       	adc	r30, r30
    30be:	ff 1f       	adc	r31, r31
    30c0:	a2 17       	cp	r26, r18
    30c2:	b3 07       	cpc	r27, r19
    30c4:	e4 07       	cpc	r30, r20
    30c6:	f5 07       	cpc	r31, r21
    30c8:	20 f0       	brcs	.+8      	; 0x30d2 <__udivmodsi4_ep>
    30ca:	a2 1b       	sub	r26, r18
    30cc:	b3 0b       	sbc	r27, r19
    30ce:	e4 0b       	sbc	r30, r20
    30d0:	f5 0b       	sbc	r31, r21

000030d2 <__udivmodsi4_ep>:
    30d2:	66 1f       	adc	r22, r22
    30d4:	77 1f       	adc	r23, r23
    30d6:	88 1f       	adc	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	1a 94       	dec	r1
    30dc:	69 f7       	brne	.-38     	; 0x30b8 <__udivmodsi4_loop>
    30de:	60 95       	com	r22
    30e0:	70 95       	com	r23
    30e2:	80 95       	com	r24
    30e4:	90 95       	com	r25
    30e6:	9b 01       	movw	r18, r22
    30e8:	ac 01       	movw	r20, r24
    30ea:	bd 01       	movw	r22, r26
    30ec:	cf 01       	movw	r24, r30
    30ee:	08 95       	ret

000030f0 <__prologue_saves__>:
    30f0:	2f 92       	push	r2
    30f2:	3f 92       	push	r3
    30f4:	4f 92       	push	r4
    30f6:	5f 92       	push	r5
    30f8:	6f 92       	push	r6
    30fa:	7f 92       	push	r7
    30fc:	8f 92       	push	r8
    30fe:	9f 92       	push	r9
    3100:	af 92       	push	r10
    3102:	bf 92       	push	r11
    3104:	cf 92       	push	r12
    3106:	df 92       	push	r13
    3108:	ef 92       	push	r14
    310a:	ff 92       	push	r15
    310c:	0f 93       	push	r16
    310e:	1f 93       	push	r17
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	ca 1b       	sub	r28, r26
    311a:	db 0b       	sbc	r29, r27
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	09 94       	ijmp

00003128 <__epilogue_restores__>:
    3128:	2a 88       	ldd	r2, Y+18	; 0x12
    312a:	39 88       	ldd	r3, Y+17	; 0x11
    312c:	48 88       	ldd	r4, Y+16	; 0x10
    312e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3130:	6e 84       	ldd	r6, Y+14	; 0x0e
    3132:	7d 84       	ldd	r7, Y+13	; 0x0d
    3134:	8c 84       	ldd	r8, Y+12	; 0x0c
    3136:	9b 84       	ldd	r9, Y+11	; 0x0b
    3138:	aa 84       	ldd	r10, Y+10	; 0x0a
    313a:	b9 84       	ldd	r11, Y+9	; 0x09
    313c:	c8 84       	ldd	r12, Y+8	; 0x08
    313e:	df 80       	ldd	r13, Y+7	; 0x07
    3140:	ee 80       	ldd	r14, Y+6	; 0x06
    3142:	fd 80       	ldd	r15, Y+5	; 0x05
    3144:	0c 81       	ldd	r16, Y+4	; 0x04
    3146:	1b 81       	ldd	r17, Y+3	; 0x03
    3148:	aa 81       	ldd	r26, Y+2	; 0x02
    314a:	b9 81       	ldd	r27, Y+1	; 0x01
    314c:	ce 0f       	add	r28, r30
    314e:	d1 1d       	adc	r29, r1
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	ed 01       	movw	r28, r26
    315c:	08 95       	ret

0000315e <itoa>:
    315e:	fb 01       	movw	r30, r22
    3160:	9f 01       	movw	r18, r30
    3162:	e8 94       	clt
    3164:	42 30       	cpi	r20, 0x02	; 2
    3166:	c4 f0       	brlt	.+48     	; 0x3198 <itoa+0x3a>
    3168:	45 32       	cpi	r20, 0x25	; 37
    316a:	b4 f4       	brge	.+44     	; 0x3198 <itoa+0x3a>
    316c:	4a 30       	cpi	r20, 0x0A	; 10
    316e:	29 f4       	brne	.+10     	; 0x317a <itoa+0x1c>
    3170:	97 fb       	bst	r25, 7
    3172:	1e f4       	brtc	.+6      	; 0x317a <itoa+0x1c>
    3174:	90 95       	com	r25
    3176:	81 95       	neg	r24
    3178:	9f 4f       	sbci	r25, 0xFF	; 255
    317a:	64 2f       	mov	r22, r20
    317c:	77 27       	eor	r23, r23
    317e:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__udivmodhi4>
    3182:	80 5d       	subi	r24, 0xD0	; 208
    3184:	8a 33       	cpi	r24, 0x3A	; 58
    3186:	0c f0       	brlt	.+2      	; 0x318a <itoa+0x2c>
    3188:	89 5d       	subi	r24, 0xD9	; 217
    318a:	81 93       	st	Z+, r24
    318c:	cb 01       	movw	r24, r22
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	a1 f7       	brne	.-24     	; 0x317a <itoa+0x1c>
    3192:	16 f4       	brtc	.+4      	; 0x3198 <itoa+0x3a>
    3194:	5d e2       	ldi	r21, 0x2D	; 45
    3196:	51 93       	st	Z+, r21
    3198:	10 82       	st	Z, r1
    319a:	c9 01       	movw	r24, r18
    319c:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <strrev>

000031a0 <strrev>:
    31a0:	dc 01       	movw	r26, r24
    31a2:	fc 01       	movw	r30, r24
    31a4:	67 2f       	mov	r22, r23
    31a6:	71 91       	ld	r23, Z+
    31a8:	77 23       	and	r23, r23
    31aa:	e1 f7       	brne	.-8      	; 0x31a4 <strrev+0x4>
    31ac:	32 97       	sbiw	r30, 0x02	; 2
    31ae:	04 c0       	rjmp	.+8      	; 0x31b8 <strrev+0x18>
    31b0:	7c 91       	ld	r23, X
    31b2:	6d 93       	st	X+, r22
    31b4:	70 83       	st	Z, r23
    31b6:	62 91       	ld	r22, -Z
    31b8:	ae 17       	cp	r26, r30
    31ba:	bf 07       	cpc	r27, r31
    31bc:	c8 f3       	brcs	.-14     	; 0x31b0 <strrev+0x10>
    31be:	08 95       	ret

000031c0 <__udivmodhi4>:
    31c0:	aa 1b       	sub	r26, r26
    31c2:	bb 1b       	sub	r27, r27
    31c4:	51 e1       	ldi	r21, 0x11	; 17
    31c6:	07 c0       	rjmp	.+14     	; 0x31d6 <__udivmodhi4_ep>

000031c8 <__udivmodhi4_loop>:
    31c8:	aa 1f       	adc	r26, r26
    31ca:	bb 1f       	adc	r27, r27
    31cc:	a6 17       	cp	r26, r22
    31ce:	b7 07       	cpc	r27, r23
    31d0:	10 f0       	brcs	.+4      	; 0x31d6 <__udivmodhi4_ep>
    31d2:	a6 1b       	sub	r26, r22
    31d4:	b7 0b       	sbc	r27, r23

000031d6 <__udivmodhi4_ep>:
    31d6:	88 1f       	adc	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	5a 95       	dec	r21
    31dc:	a9 f7       	brne	.-22     	; 0x31c8 <__udivmodhi4_loop>
    31de:	80 95       	com	r24
    31e0:	90 95       	com	r25
    31e2:	bc 01       	movw	r22, r24
    31e4:	cd 01       	movw	r24, r26
    31e6:	08 95       	ret

000031e8 <_exit>:
    31e8:	f8 94       	cli

000031ea <__stop_program>:
    31ea:	ff cf       	rjmp	.-2      	; 0x31ea <__stop_program>
