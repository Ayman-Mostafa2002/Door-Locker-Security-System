
Control0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000233c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000233c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800076  00800076  000023e6  2**0
                  ALLOC
  3 .stab         00002670  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000131a  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 07 	call	0xede	; 0xede <main>
      8a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <savePasswordToEEPROM>:
uint8 g_ticks=0;
uint8 g_passwordSatate=THERE_IS_NO_PASSWORD;

/*Saving password in EEPROM*/
void savePasswordToEEPROM(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	for(uint8 i=0;i<MAX_DIGITS;i++)
     b5a:	1f 86       	std	Y+15, r1	; 0x0f
     b5c:	85 c0       	rjmp	.+266    	; 0xc68 <savePasswordToEEPROM+0x122>
	{
		EEPROM_writeByte(EEPROM_FIRST_ADDRESS_VALUE + i, password[i]);
     b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	40 96       	adiw	r24, 0x10	; 16
     b66:	ac 01       	movw	r20, r24
     b68:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	fc 01       	movw	r30, r24
     b70:	ea 58       	subi	r30, 0x8A	; 138
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	20 81       	ld	r18, Z
     b76:	ca 01       	movw	r24, r20
     b78:	62 2f       	mov	r22, r18
     b7a:	0e 94 09 09 	call	0x1212	; 0x1212 <EEPROM_writeByte>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 ea       	ldi	r26, 0xA0	; 160
     b84:	b1 e4       	ldi	r27, 0x41	; 65
     b86:	8b 87       	std	Y+11, r24	; 0x0b
     b88:	9c 87       	std	Y+12, r25	; 0x0c
     b8a:	ad 87       	std	Y+13, r26	; 0x0d
     b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b90:	7c 85       	ldd	r23, Y+12	; 0x0c
     b92:	8d 85       	ldd	r24, Y+13	; 0x0d
     b94:	9e 85       	ldd	r25, Y+14	; 0x0e
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a ef       	ldi	r20, 0xFA	; 250
     b9c:	54 e4       	ldi	r21, 0x44	; 68
     b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	8f 83       	std	Y+7, r24	; 0x07
     ba8:	98 87       	std	Y+8, r25	; 0x08
     baa:	a9 87       	std	Y+9, r26	; 0x09
     bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bae:	6f 81       	ldd	r22, Y+7	; 0x07
     bb0:	78 85       	ldd	r23, Y+8	; 0x08
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc2:	88 23       	and	r24, r24
     bc4:	2c f4       	brge	.+10     	; 0xbd0 <savePasswordToEEPROM+0x8a>
		__ticks = 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	3f c0       	rjmp	.+126    	; 0xc4e <savePasswordToEEPROM+0x108>
	else if (__tmp > 65535)
     bd0:	6f 81       	ldd	r22, Y+7	; 0x07
     bd2:	78 85       	ldd	r23, Y+8	; 0x08
     bd4:	89 85       	ldd	r24, Y+9	; 0x09
     bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be4:	18 16       	cp	r1, r24
     be6:	4c f5       	brge	.+82     	; 0xc3a <savePasswordToEEPROM+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bea:	7c 85       	ldd	r23, Y+12	; 0x0c
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
     c10:	0f c0       	rjmp	.+30     	; 0xc30 <savePasswordToEEPROM+0xea>
     c12:	88 ec       	ldi	r24, 0xC8	; 200
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <savePasswordToEEPROM+0xd8>
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c26:	8d 81       	ldd	r24, Y+5	; 0x05
     c28:	9e 81       	ldd	r25, Y+6	; 0x06
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	69 f7       	brne	.-38     	; 0xc12 <savePasswordToEEPROM+0xcc>
     c38:	14 c0       	rjmp	.+40     	; 0xc62 <savePasswordToEEPROM+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3a:	6f 81       	ldd	r22, Y+7	; 0x07
     c3c:	78 85       	ldd	r23, Y+8	; 0x08
     c3e:	89 85       	ldd	r24, Y+9	; 0x09
     c40:	9a 85       	ldd	r25, Y+10	; 0x0a
     c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <savePasswordToEEPROM+0x114>
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
uint8 g_passwordSatate=THERE_IS_NO_PASSWORD;

/*Saving password in EEPROM*/
void savePasswordToEEPROM(void)
{
	for(uint8 i=0;i<MAX_DIGITS;i++)
     c62:	8f 85       	ldd	r24, Y+15	; 0x0f
     c64:	8f 5f       	subi	r24, 0xFF	; 255
     c66:	8f 87       	std	Y+15, r24	; 0x0f
     c68:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6a:	85 30       	cpi	r24, 0x05	; 5
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <savePasswordToEEPROM+0x12a>
     c6e:	77 cf       	rjmp	.-274    	; 0xb5e <savePasswordToEEPROM+0x18>
	{
		EEPROM_writeByte(EEPROM_FIRST_ADDRESS_VALUE + i, password[i]);
		_delay_ms(20);
	}
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <readPasswordFromEEPROM>:

void readPasswordFromEEPROM(uint8*arr)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	61 97       	sbiw	r28, 0x11	; 17
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	99 8b       	std	Y+17, r25	; 0x11
     c98:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i=0;i<MAX_DIGITS;i++)
     c9a:	1f 86       	std	Y+15, r1	; 0x0f
     c9c:	88 c0       	rjmp	.+272    	; 0xdae <readPasswordFromEEPROM+0x12c>
	{
		EEPROM_readByte(EEPROM_FIRST_ADDRESS_VALUE+i,password[i]);
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	40 96       	adiw	r24, 0x10	; 16
     ca6:	ac 01       	movw	r20, r24
     ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
     caa:	88 2f       	mov	r24, r24
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	ea 58       	subi	r30, 0x8A	; 138
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	80 81       	ld	r24, Z
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9c 01       	movw	r18, r24
     cbc:	ca 01       	movw	r24, r20
     cbe:	b9 01       	movw	r22, r18
     cc0:	0e 94 4a 09 	call	0x1294	; 0x1294 <EEPROM_readByte>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 ea       	ldi	r26, 0xA0	; 160
     cca:	b1 e4       	ldi	r27, 0x41	; 65
     ccc:	8b 87       	std	Y+11, r24	; 0x0b
     cce:	9c 87       	std	Y+12, r25	; 0x0c
     cd0:	ad 87       	std	Y+13, r26	; 0x0d
     cd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cda:	9e 85       	ldd	r25, Y+14	; 0x0e
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a ef       	ldi	r20, 0xFA	; 250
     ce2:	54 e4       	ldi	r21, 0x44	; 68
     ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	8f 83       	std	Y+7, r24	; 0x07
     cee:	98 87       	std	Y+8, r25	; 0x08
     cf0:	a9 87       	std	Y+9, r26	; 0x09
     cf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf4:	6f 81       	ldd	r22, Y+7	; 0x07
     cf6:	78 85       	ldd	r23, Y+8	; 0x08
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d08:	88 23       	and	r24, r24
     d0a:	2c f4       	brge	.+10     	; 0xd16 <readPasswordFromEEPROM+0x94>
		__ticks = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9e 83       	std	Y+6, r25	; 0x06
     d12:	8d 83       	std	Y+5, r24	; 0x05
     d14:	3f c0       	rjmp	.+126    	; 0xd94 <readPasswordFromEEPROM+0x112>
	else if (__tmp > 65535)
     d16:	6f 81       	ldd	r22, Y+7	; 0x07
     d18:	78 85       	ldd	r23, Y+8	; 0x08
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	57 e4       	ldi	r21, 0x47	; 71
     d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	4c f5       	brge	.+82     	; 0xd80 <readPasswordFromEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d30:	7c 85       	ldd	r23, Y+12	; 0x0c
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	9e 85       	ldd	r25, Y+14	; 0x0e
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9e 83       	std	Y+6, r25	; 0x06
     d54:	8d 83       	std	Y+5, r24	; 0x05
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <readPasswordFromEEPROM+0xf4>
     d58:	88 ec       	ldi	r24, 0xC8	; 200
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9c 83       	std	Y+4, r25	; 0x04
     d5e:	8b 83       	std	Y+3, r24	; 0x03
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <readPasswordFromEEPROM+0xe2>
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f7       	brne	.-38     	; 0xd58 <readPasswordFromEEPROM+0xd6>
     d7e:	14 c0       	rjmp	.+40     	; 0xda8 <readPasswordFromEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d80:	6f 81       	ldd	r22, Y+7	; 0x07
     d82:	78 85       	ldd	r23, Y+8	; 0x08
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <readPasswordFromEEPROM+0x11e>
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
	}
}

void readPasswordFromEEPROM(uint8*arr)
{
	for(uint8 i=0;i<MAX_DIGITS;i++)
     da8:	8f 85       	ldd	r24, Y+15	; 0x0f
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	8f 87       	std	Y+15, r24	; 0x0f
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
     db0:	85 30       	cpi	r24, 0x05	; 5
     db2:	08 f4       	brcc	.+2      	; 0xdb6 <readPasswordFromEEPROM+0x134>
     db4:	74 cf       	rjmp	.-280    	; 0xc9e <readPasswordFromEEPROM+0x1c>
	{
		EEPROM_readByte(EEPROM_FIRST_ADDRESS_VALUE+i,password[i]);
		_delay_ms(20);
	}
}
     db6:	61 96       	adiw	r28, 0x11	; 17
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <checkTwoArray>:

uint8 checkTwoArray(uint8*arr1,uint8*arr2,uint8 length)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	27 97       	sbiw	r28, 0x07	; 7
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	9b 83       	std	Y+3, r25	; 0x03
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	7d 83       	std	Y+5, r23	; 0x05
     de2:	6c 83       	std	Y+4, r22	; 0x04
     de4:	4e 83       	std	Y+6, r20	; 0x06
	for(uint8 i=0;i<length;i++)
     de6:	19 82       	std	Y+1, r1	; 0x01
     de8:	19 c0       	rjmp	.+50     	; 0xe1c <checkTwoArray+0x54>
	{
		if(arr1[i]!=arr2[i])
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	9b 81       	ldd	r25, Y+3	; 0x03
     df4:	fc 01       	movw	r30, r24
     df6:	e2 0f       	add	r30, r18
     df8:	f3 1f       	adc	r31, r19
     dfa:	40 81       	ld	r20, Z
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	fc 01       	movw	r30, r24
     e08:	e2 0f       	add	r30, r18
     e0a:	f3 1f       	adc	r31, r19
     e0c:	80 81       	ld	r24, Z
     e0e:	48 17       	cp	r20, r24
     e10:	11 f0       	breq	.+4      	; 0xe16 <checkTwoArray+0x4e>
		{
			return MISMATCHED;
     e12:	1f 82       	std	Y+7, r1	; 0x07
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <checkTwoArray+0x60>
	}
}

uint8 checkTwoArray(uint8*arr1,uint8*arr2,uint8 length)
{
	for(uint8 i=0;i<length;i++)
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	99 81       	ldd	r25, Y+1	; 0x01
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	98 17       	cp	r25, r24
     e22:	18 f3       	brcs	.-58     	; 0xdea <checkTwoArray+0x22>
		if(arr1[i]!=arr2[i])
		{
			return MISMATCHED;
		}
	}
	return MATCHED;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	8f 83       	std	Y+7, r24	; 0x07
     e28:	8f 81       	ldd	r24, Y+7	; 0x07
}
     e2a:	27 96       	adiw	r28, 0x07	; 7
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <countOneSecond>:

/* this function is executed each 1 second*/
void countOneSecond()
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     e44:	80 91 82 00 	lds	r24, 0x0082
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	80 93 82 00 	sts	0x0082, r24
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <DelaySecondTimer1>:


void DelaySecondTimer1(uint8 timeSec)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	2c 97       	sbiw	r28, 0x0c	; 12
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	8f 83       	std	Y+7, r24	; 0x07
	/* Select the configuration For TIMER1 */
	Timer1_ConfigType Config_Ptr1={CTC_INITIAL_VALUE,CTC_VALUE_FOR_ONE_SECOND,PRESCALE_1024,COMPARE_MODE};
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	99 87       	std	Y+9, r25	; 0x09
     e70:	88 87       	std	Y+8, r24	; 0x08
     e72:	e9 e6       	ldi	r30, 0x69	; 105
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	fb 87       	std	Y+11, r31	; 0x0b
     e78:	ea 87       	std	Y+10, r30	; 0x0a
     e7a:	f6 e0       	ldi	r31, 0x06	; 6
     e7c:	fc 87       	std	Y+12, r31	; 0x0c
     e7e:	ea 85       	ldd	r30, Y+10	; 0x0a
     e80:	fb 85       	ldd	r31, Y+11	; 0x0b
     e82:	00 80       	ld	r0, Z
     e84:	8a 85       	ldd	r24, Y+10	; 0x0a
     e86:	9b 85       	ldd	r25, Y+11	; 0x0b
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	9b 87       	std	Y+11, r25	; 0x0b
     e8c:	8a 87       	std	Y+10, r24	; 0x0a
     e8e:	e8 85       	ldd	r30, Y+8	; 0x08
     e90:	f9 85       	ldd	r31, Y+9	; 0x09
     e92:	00 82       	st	Z, r0
     e94:	88 85       	ldd	r24, Y+8	; 0x08
     e96:	99 85       	ldd	r25, Y+9	; 0x09
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	99 87       	std	Y+9, r25	; 0x09
     e9c:	88 87       	std	Y+8, r24	; 0x08
     e9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea0:	91 50       	subi	r25, 0x01	; 1
     ea2:	9c 87       	std	Y+12, r25	; 0x0c
     ea4:	ec 85       	ldd	r30, Y+12	; 0x0c
     ea6:	ee 23       	and	r30, r30
     ea8:	51 f7       	brne	.-44     	; 0xe7e <DelaySecondTimer1+0x2a>
	/* Set the call back function */
	Timer1_setCallBack(countOneSecond);
     eaa:	8e e1       	ldi	r24, 0x1E	; 30
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Timer1_setCallBack>
	/*Configuration For TIMER1 */
	Timer1_init(&Config_Ptr1);
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <Timer1_init>
	/* waiting for 15 seconds until the door is unlocking */
	while (g_ticks < timeSec);
     eba:	90 91 82 00 	lds	r25, 0x0082
     ebe:	8f 81       	ldd	r24, Y+7	; 0x07
     ec0:	98 17       	cp	r25, r24
     ec2:	d8 f3       	brcs	.-10     	; 0xeba <DelaySecondTimer1+0x66>
	g_ticks = 0;
     ec4:	10 92 82 00 	sts	0x0082, r1
	/* stop the timer1 */
	Timer1_deInit();
     ec8:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Timer1_deInit>
}
     ecc:	2c 96       	adiw	r28, 0x0c	; 12
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <main>:



int main(void)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	60 97       	sbiw	r28, 0x10	; 16
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
	// Enable global interrupts
	SREG=1<<7;
     ef2:	ef e5       	ldi	r30, 0x5F	; 95
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 e8       	ldi	r24, 0x80	; 128
     ef8:	80 83       	st	Z, r24
	//select settings for uart
	UART_ConfigType uart_config_1={EIGHT_BITS,DISABLED,ONE_BITS,9600};
     efa:	9e 01       	movw	r18, r28
     efc:	2f 5f       	subi	r18, 0xFF	; 255
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	3d 87       	std	Y+13, r19	; 0x0d
     f02:	2c 87       	std	Y+12, r18	; 0x0c
     f04:	8f e6       	ldi	r24, 0x6F	; 111
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9f 87       	std	Y+15, r25	; 0x0f
     f0a:	8e 87       	std	Y+14, r24	; 0x0e
     f0c:	97 e0       	ldi	r25, 0x07	; 7
     f0e:	98 8b       	std	Y+16, r25	; 0x10
     f10:	ee 85       	ldd	r30, Y+14	; 0x0e
     f12:	ff 85       	ldd	r31, Y+15	; 0x0f
     f14:	00 80       	ld	r0, Z
     f16:	2e 85       	ldd	r18, Y+14	; 0x0e
     f18:	3f 85       	ldd	r19, Y+15	; 0x0f
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	3f 87       	std	Y+15, r19	; 0x0f
     f20:	2e 87       	std	Y+14, r18	; 0x0e
     f22:	ec 85       	ldd	r30, Y+12	; 0x0c
     f24:	fd 85       	ldd	r31, Y+13	; 0x0d
     f26:	00 82       	st	Z, r0
     f28:	2c 85       	ldd	r18, Y+12	; 0x0c
     f2a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	3d 87       	std	Y+13, r19	; 0x0d
     f32:	2c 87       	std	Y+12, r18	; 0x0c
     f34:	38 89       	ldd	r19, Y+16	; 0x10
     f36:	31 50       	subi	r19, 0x01	; 1
     f38:	38 8b       	std	Y+16, r19	; 0x10
     f3a:	88 89       	ldd	r24, Y+16	; 0x10
     f3c:	88 23       	and	r24, r24
     f3e:	41 f7       	brne	.-48     	; 0xf10 <main+0x32>
	UART_init(&uart_config_1);
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <UART_init>
	/* select the configuration of TWI */
	TWI_ConfigType twi_config_1 ={MC_ADDRESS, FAST_MODE_400_KB_PER_SEC};
     f48:	81 ee       	ldi	r24, 0xE1	; 225
     f4a:	88 87       	std	Y+8, r24	; 0x08
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	89 87       	std	Y+9, r24	; 0x09
	TWI_init(&twi_config_1);
     f50:	ce 01       	movw	r24, r28
     f52:	08 96       	adiw	r24, 0x08	; 8
     f54:	0e 94 75 0e 	call	0x1cea	; 0x1cea <TWI_init>
	//initiation
	Buzzer_init();
     f58:	0e 94 75 08 	call	0x10ea	; 0x10ea <Buzzer_init>
	DcMotor_Init();
     f5c:	0e 94 9e 08 	call	0x113c	; 0x113c <DcMotor_Init>


	while(1)
	{
		/* blocking and wait for order from HMI_ECU */
		g_currentMode = UART_recieveByte();
     f60:	0e 94 8b 10 	call	0x2116	; 0x2116 <UART_recieveByte>
     f64:	80 93 81 00 	sts	0x0081, r24

		switch(g_currentMode)
     f68:	80 91 81 00 	lds	r24, 0x0081
     f6c:	e8 2f       	mov	r30, r24
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	fb 87       	std	Y+11, r31	; 0x0b
     f72:	ea 87       	std	Y+10, r30	; 0x0a
     f74:	2a 85       	ldd	r18, Y+10	; 0x0a
     f76:	3b 85       	ldd	r19, Y+11	; 0x0b
     f78:	2d 30       	cpi	r18, 0x0D	; 13
     f7a:	31 05       	cpc	r19, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <main+0xa2>
     f7e:	43 c0       	rjmp	.+134    	; 0x1006 <main+0x128>
     f80:	8a 85       	ldd	r24, Y+10	; 0x0a
     f82:	9b 85       	ldd	r25, Y+11	; 0x0b
     f84:	8e 30       	cpi	r24, 0x0E	; 14
     f86:	91 05       	cpc	r25, r1
     f88:	64 f4       	brge	.+24     	; 0xfa2 <main+0xc4>
     f8a:	ea 85       	ldd	r30, Y+10	; 0x0a
     f8c:	fb 85       	ldd	r31, Y+11	; 0x0b
     f8e:	e9 30       	cpi	r30, 0x09	; 9
     f90:	f1 05       	cpc	r31, r1
     f92:	91 f0       	breq	.+36     	; 0xfb8 <main+0xda>
     f94:	2a 85       	ldd	r18, Y+10	; 0x0a
     f96:	3b 85       	ldd	r19, Y+11	; 0x0b
     f98:	2c 30       	cpi	r18, 0x0C	; 12
     f9a:	31 05       	cpc	r19, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <main+0xc2>
     f9e:	77 c0       	rjmp	.+238    	; 0x108e <main+0x1b0>
     fa0:	df cf       	rjmp	.-66     	; 0xf60 <main+0x82>
     fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa4:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa6:	8e 30       	cpi	r24, 0x0E	; 14
     fa8:	91 05       	cpc	r25, r1
     faa:	89 f0       	breq	.+34     	; 0xfce <main+0xf0>
     fac:	ea 85       	ldd	r30, Y+10	; 0x0a
     fae:	fb 85       	ldd	r31, Y+11	; 0x0b
     fb0:	ef 30       	cpi	r30, 0x0F	; 15
     fb2:	f1 05       	cpc	r31, r1
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <main+0xe4>
     fb6:	d4 cf       	rjmp	.-88     	; 0xf60 <main+0x82>
		{

		case THERE_IS_PASSWORD_OR_NO:
			UART_sendByte(g_passwordSatate);
     fb8:	80 91 68 00 	lds	r24, 0x0068
     fbc:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
     fc0:	cf cf       	rjmp	.-98     	; 0xf60 <main+0x82>
			break;

		case SENDING_FIRST_PASSWORD:
			UART_recieveArrayOfByte(password,MAX_DIGITS);
     fc2:	86 e7       	ldi	r24, 0x76	; 118
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	65 e0       	ldi	r22, 0x05	; 5
     fc8:	0e 94 9a 10 	call	0x2134	; 0x2134 <UART_recieveArrayOfByte>
     fcc:	c9 cf       	rjmp	.-110    	; 0xf60 <main+0x82>
			break;

		case SENDING_SECOND_PASSWORD:
			UART_recieveArrayOfByte(password_check,MAX_DIGITS);
     fce:	8b e7       	ldi	r24, 0x7B	; 123
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	65 e0       	ldi	r22, 0x05	; 5
     fd4:	0e 94 9a 10 	call	0x2134	; 0x2134 <UART_recieveArrayOfByte>
			//check the two password and then send the result to HMI_ECU
			if(checkTwoArray(password,password_check,MAX_DIGITS))
     fd8:	86 e7       	ldi	r24, 0x76	; 118
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	2b e7       	ldi	r18, 0x7B	; 123
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	b9 01       	movw	r22, r18
     fe2:	45 e0       	ldi	r20, 0x05	; 5
     fe4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <checkTwoArray>
     fe8:	88 23       	and	r24, r24
     fea:	49 f0       	breq	.+18     	; 0xffe <main+0x120>
			{
				UART_sendByte(MATCHED);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
				savePasswordToEEPROM();
     ff2:	0e 94 a3 05 	call	0xb46	; 0xb46 <savePasswordToEEPROM>
				g_passwordSatate=THERE_IS_PASSWORD;
     ff6:	88 e0       	ldi	r24, 0x08	; 8
     ff8:	80 93 68 00 	sts	0x0068, r24
     ffc:	b1 cf       	rjmp	.-158    	; 0xf60 <main+0x82>
			}
			else
			{
				UART_sendByte(MISMATCHED);
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
    1004:	ad cf       	rjmp	.-166    	; 0xf60 <main+0x82>
			}
			break;

		case OPEN_DOOR_MODE:
			/*Control_ECU receive password from HMI_ECU  */
			UART_recieveArrayOfByte(password,MAX_DIGITS);
    1006:	86 e7       	ldi	r24, 0x76	; 118
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	65 e0       	ldi	r22, 0x05	; 5
    100c:	0e 94 9a 10 	call	0x2134	; 0x2134 <UART_recieveArrayOfByte>
			/*Read PASSWORD From EEPROM*/
			readPasswordFromEEPROM(password_check);
    1010:	8b e7       	ldi	r24, 0x7B	; 123
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 41 06 	call	0xc82	; 0xc82 <readPasswordFromEEPROM>
			if(checkTwoArray(password,password_check,MAX_DIGITS))
    1018:	86 e7       	ldi	r24, 0x76	; 118
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	2b e7       	ldi	r18, 0x7B	; 123
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	b9 01       	movw	r22, r18
    1022:	45 e0       	ldi	r20, 0x05	; 5
    1024:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <checkTwoArray>
    1028:	88 23       	and	r24, r24
    102a:	e9 f0       	breq	.+58     	; 0x1066 <main+0x188>
			{
				UART_sendByte(MATCHED);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
				/*rotates motor for 15-seconds CW and display a message on the screen"Door is Unlocking"*/
				DcMotor_Rotate(CW,MAX_SPEED_FOR_DC_MOTER);
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	64 e6       	ldi	r22, 0x64	; 100
    1036:	0e 94 b9 08 	call	0x1172	; 0x1172 <DcMotor_Rotate>
				/* waiting 15 seconds for the door to open  */
				DelaySecondTimer1(TIME_FOR_UNLOKING_THE_DOOR);
    103a:	8f e0       	ldi	r24, 0x0F	; 15
    103c:	0e 94 2a 07 	call	0xe54	; 0xe54 <DelaySecondTimer1>
				/* Stop the motor */
				DcMotor_Rotate(STOP, 0);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 b9 08 	call	0x1172	; 0x1172 <DcMotor_Rotate>
				/* waiting for 3 seconds the hold period of the door */
				DelaySecondTimer1(DOOR_HOLD_TIME);
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	0e 94 2a 07 	call	0xe54	; 0xe54 <DelaySecondTimer1>
				/* turn on motor at max speed with anti clock wise direction */
				DcMotor_Rotate(A_CW,MAX_SPEED_FOR_DC_MOTER);
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	64 e6       	ldi	r22, 0x64	; 100
    1052:	0e 94 b9 08 	call	0x1172	; 0x1172 <DcMotor_Rotate>
				/* waiting 15 seconds for the door to lock  */
				DelaySecondTimer1(TIME_FOR_UNLOKING_THE_DOOR);
    1056:	8f e0       	ldi	r24, 0x0F	; 15
    1058:	0e 94 2a 07 	call	0xe54	; 0xe54 <DelaySecondTimer1>
				/* stop the motor */
				DcMotor_Rotate(STOP, 0);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	0e 94 b9 08 	call	0x1172	; 0x1172 <DcMotor_Rotate>
    1064:	7d cf       	rjmp	.-262    	; 0xf60 <main+0x82>
			}
			else
			{
				/*send to HMI_ECU that passwords are mismatched*/
				UART_sendByte(MISMATCHED);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
				/* wait HMI_ECU to take action to Turn on or Turn off the Buzzer */
				g_commandRececived=UART_recieveByte();
    106c:	0e 94 8b 10 	call	0x2116	; 0x2116 <UART_recieveByte>
    1070:	80 93 80 00 	sts	0x0080, r24
				if (g_commandRececived== BUZZER_ON)
    1074:	80 91 80 00 	lds	r24, 0x0080
    1078:	80 3b       	cpi	r24, 0xB0	; 176
    107a:	09 f0       	breq	.+2      	; 0x107e <main+0x1a0>
    107c:	71 cf       	rjmp	.-286    	; 0xf60 <main+0x82>
				{
					/* turn on the buzzer */
					Buzzer_on();
    107e:	0e 94 86 08 	call	0x110c	; 0x110c <Buzzer_on>
					/* waiting for 1 minute */
					DelaySecondTimer1(BUZZER_ON_PERIOD);
    1082:	8c e3       	ldi	r24, 0x3C	; 60
    1084:	0e 94 2a 07 	call	0xe54	; 0xe54 <DelaySecondTimer1>
					/* turn off the buzzer */
					Buzzer_off();
    1088:	0e 94 92 08 	call	0x1124	; 0x1124 <Buzzer_off>
    108c:	69 cf       	rjmp	.-302    	; 0xf60 <main+0x82>
			}
			break;

		case CHANGE_PASSWORD:
			/*Control_ECU receive password from HMI_ECU  */
			UART_recieveArrayOfByte(password,MAX_DIGITS);
    108e:	86 e7       	ldi	r24, 0x76	; 118
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	65 e0       	ldi	r22, 0x05	; 5
    1094:	0e 94 9a 10 	call	0x2134	; 0x2134 <UART_recieveArrayOfByte>
			/*Read PASSWORD From EEPROM*/
			readPasswordFromEEPROM(password_check);
    1098:	8b e7       	ldi	r24, 0x7B	; 123
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 41 06 	call	0xc82	; 0xc82 <readPasswordFromEEPROM>
			/*checking between them*/
			if(checkTwoArray(password,password_check,MAX_DIGITS))
    10a0:	86 e7       	ldi	r24, 0x76	; 118
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	2b e7       	ldi	r18, 0x7B	; 123
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	b9 01       	movw	r22, r18
    10aa:	45 e0       	ldi	r20, 0x05	; 5
    10ac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <checkTwoArray>
    10b0:	88 23       	and	r24, r24
    10b2:	39 f0       	breq	.+14     	; 0x10c2 <main+0x1e4>
			{
				UART_sendByte(MATCHED);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
				//now there is no password for system
				g_passwordSatate=THERE_IS_NO_PASSWORD;
    10ba:	87 e0       	ldi	r24, 0x07	; 7
    10bc:	80 93 68 00 	sts	0x0068, r24
    10c0:	4f cf       	rjmp	.-354    	; 0xf60 <main+0x82>
			}
			else
			{
				/*send to HMI_ECU that passwords are mismatched*/
				UART_sendByte(MISMATCHED);
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
				/* wait HMI_ECU to take action to Turn on or Turn off the Buzzer */
				g_commandRececived=UART_recieveByte();
    10c8:	0e 94 8b 10 	call	0x2116	; 0x2116 <UART_recieveByte>
    10cc:	80 93 80 00 	sts	0x0080, r24
				if (g_commandRececived== BUZZER_ON)
    10d0:	80 91 80 00 	lds	r24, 0x0080
    10d4:	80 3b       	cpi	r24, 0xB0	; 176
    10d6:	09 f0       	breq	.+2      	; 0x10da <main+0x1fc>
    10d8:	43 cf       	rjmp	.-378    	; 0xf60 <main+0x82>
				{
					/* turn on the buzzer */
					Buzzer_on();
    10da:	0e 94 86 08 	call	0x110c	; 0x110c <Buzzer_on>
					/* waiting for 1 minute */
					DelaySecondTimer1(BUZZER_ON_PERIOD);
    10de:	8c e3       	ldi	r24, 0x3C	; 60
    10e0:	0e 94 2a 07 	call	0xe54	; 0xe54 <DelaySecondTimer1>
					/* turn off the buzzer */
					Buzzer_off();
    10e4:	0e 94 92 08 	call	0x1124	; 0x1124 <Buzzer_off>
    10e8:	3b cf       	rjmp	.-394    	; 0xf60 <main+0x82>

000010ea <Buzzer_init>:
/* Description
  ⮚ Setup the direction for the buzzer pin as output pin through the GPIO driver.
  ⮚ Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <Buzzer_on>:

/* Description
   ⮚ Function to enable the Buzzer through the GPIO.
   */
void Buzzer_on(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
}
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <Buzzer_off>:

/* Description
   ⮚ Function to disable the Buzzer through the GPIO.
*/
void Buzzer_off(void)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DcMotor_Init>:
 * The Function responsible for setup the direction for the two
   motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver..
 */
void DcMotor_Init(void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	/*  setup the direction for the two motor pins through the GPIO driver. */
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,PIN_OUTPUT);
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,PIN_OUTPUT);
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	41 e0       	ldi	r20, 0x01	; 1
    1154:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_setupPinDirection>
	/* Stop at the DC-Motor at the beginning through the GPIO driver */
	GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <DcMotor_Rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or
   stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DcMotor_Rotate+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <DcMotor_Rotate+0x8>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	6a 83       	std	Y+2, r22	; 0x02
	/*rotate the DC Motor CW/ or A-CW or stop the motor based on the state*/
	switch (state)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3c 83       	std	Y+4, r19	; 0x04
    118a:	2b 83       	std	Y+3, r18	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	a1 f0       	breq	.+40     	; 0x11be <DcMotor_Rotate+0x4c>
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	d1 f0       	breq	.+52     	; 0x11d4 <DcMotor_Rotate+0x62>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	09 f5       	brne	.+66     	; 0x11ea <DcMotor_Rotate+0x78>
	{
	case STOP:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
    11bc:	20 c0       	rjmp	.+64     	; 0x11fe <DcMotor_Rotate+0x8c>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_HIGH);
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
    11d2:	15 c0       	rjmp	.+42     	; 0x11fe <DcMotor_Rotate+0x8c>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_HIGH);
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	41 e0       	ldi	r20, 0x01	; 1
    11e4:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
    11e8:	0a c0       	rjmp	.+20     	; 0x11fe <DcMotor_Rotate+0x8c>
		break;
	default:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	0e 94 95 0a 	call	0x152a	; 0x152a <GPIO_writePin>
		break;
	}
	//send the speed to PWM function
	PWM_Timer0_Start(speed);
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <PWM_Timer0_Start>
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <EEPROM_writeByte+0x6>
    1218:	00 d0       	rcall	.+0      	; 0x121a <EEPROM_writeByte+0x8>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1224:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1228:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    122c:	88 30       	cpi	r24, 0x08	; 8
    122e:	11 f0       	breq	.+4      	; 0x1234 <EEPROM_writeByte+0x22>
        return ERROR;
    1230:	1c 82       	std	Y+4, r1	; 0x04
    1232:	28 c0       	rjmp	.+80     	; 0x1284 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	80 70       	andi	r24, 0x00	; 0
    123a:	97 70       	andi	r25, 0x07	; 7
    123c:	88 0f       	add	r24, r24
    123e:	89 2f       	mov	r24, r25
    1240:	88 1f       	adc	r24, r24
    1242:	99 0b       	sbc	r25, r25
    1244:	91 95       	neg	r25
    1246:	80 6a       	ori	r24, 0xA0	; 160
    1248:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    124c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    1250:	88 31       	cpi	r24, 0x18	; 24
    1252:	11 f0       	breq	.+4      	; 0x1258 <EEPROM_writeByte+0x46>
        return ERROR; 
    1254:	1c 82       	std	Y+4, r1	; 0x04
    1256:	16 c0       	rjmp	.+44     	; 0x1284 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    125e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    1262:	88 32       	cpi	r24, 0x28	; 40
    1264:	11 f0       	breq	.+4      	; 0x126a <EEPROM_writeByte+0x58>
        return ERROR;
    1266:	1c 82       	std	Y+4, r1	; 0x04
    1268:	0d c0       	rjmp	.+26     	; 0x1284 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1270:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    1274:	88 32       	cpi	r24, 0x28	; 40
    1276:	11 f0       	breq	.+4      	; 0x127c <EEPROM_writeByte+0x6a>
        return ERROR;
    1278:	1c 82       	std	Y+4, r1	; 0x04
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    127c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_stop>
	
    return SUCCESS;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	8c 83       	std	Y+4, r24	; 0x04
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <EEPROM_readByte+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <EEPROM_readByte+0x8>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	7c 83       	std	Y+4, r23	; 0x04
    12a8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    12aa:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    12ae:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	11 f0       	breq	.+4      	; 0x12ba <EEPROM_readByte+0x26>
        return ERROR;
    12b6:	1d 82       	std	Y+5, r1	; 0x05
    12b8:	44 c0       	rjmp	.+136    	; 0x1342 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	80 70       	andi	r24, 0x00	; 0
    12c0:	97 70       	andi	r25, 0x07	; 7
    12c2:	88 0f       	add	r24, r24
    12c4:	89 2f       	mov	r24, r25
    12c6:	88 1f       	adc	r24, r24
    12c8:	99 0b       	sbc	r25, r25
    12ca:	91 95       	neg	r25
    12cc:	80 6a       	ori	r24, 0xA0	; 160
    12ce:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12d2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    12d6:	88 31       	cpi	r24, 0x18	; 24
    12d8:	11 f0       	breq	.+4      	; 0x12de <EEPROM_readByte+0x4a>
        return ERROR;
    12da:	1d 82       	std	Y+5, r1	; 0x05
    12dc:	32 c0       	rjmp	.+100    	; 0x1342 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12e4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    12e8:	88 32       	cpi	r24, 0x28	; 40
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <EEPROM_readByte+0x5c>
        return ERROR;
    12ec:	1d 82       	std	Y+5, r1	; 0x05
    12ee:	29 c0       	rjmp	.+82     	; 0x1342 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12f0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12f4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    12f8:	80 31       	cpi	r24, 0x10	; 16
    12fa:	11 f0       	breq	.+4      	; 0x1300 <EEPROM_readByte+0x6c>
        return ERROR;
    12fc:	1d 82       	std	Y+5, r1	; 0x05
    12fe:	21 c0       	rjmp	.+66     	; 0x1342 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	80 70       	andi	r24, 0x00	; 0
    1306:	97 70       	andi	r25, 0x07	; 7
    1308:	88 0f       	add	r24, r24
    130a:	89 2f       	mov	r24, r25
    130c:	88 1f       	adc	r24, r24
    130e:	99 0b       	sbc	r25, r25
    1310:	91 95       	neg	r25
    1312:	81 6a       	ori	r24, 0xA1	; 161
    1314:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1318:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    131c:	80 34       	cpi	r24, 0x40	; 64
    131e:	11 f0       	breq	.+4      	; 0x1324 <EEPROM_readByte+0x90>
        return ERROR;
    1320:	1d 82       	std	Y+5, r1	; 0x05
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1324:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <TWI_readByteWithNACK>
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04
    132c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    132e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    1332:	88 35       	cpi	r24, 0x58	; 88
    1334:	11 f0       	breq	.+4      	; 0x133a <EEPROM_readByte+0xa6>
        return ERROR;
    1336:	1d 82       	std	Y+5, r1	; 0x05
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    133a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_stop>

    return SUCCESS;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <GPIO_setupPinDirection+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <GPIO_setupPinDirection+0x8>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	6a 83       	std	Y+2, r22	; 0x02
    1366:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	88 30       	cpi	r24, 0x08	; 8
    136c:	08 f0       	brcs	.+2      	; 0x1370 <GPIO_setupPinDirection+0x1c>
    136e:	d5 c0       	rjmp	.+426    	; 0x151a <GPIO_setupPinDirection+0x1c6>
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	08 f0       	brcs	.+2      	; 0x1378 <GPIO_setupPinDirection+0x24>
    1376:	d1 c0       	rjmp	.+418    	; 0x151a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3d 83       	std	Y+5, r19	; 0x05
    1380:	2c 83       	std	Y+4, r18	; 0x04
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	91 05       	cpc	r25, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <GPIO_setupPinDirection+0x3a>
    138c:	43 c0       	rjmp	.+134    	; 0x1414 <GPIO_setupPinDirection+0xc0>
    138e:	2c 81       	ldd	r18, Y+4	; 0x04
    1390:	3d 81       	ldd	r19, Y+5	; 0x05
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	2c f4       	brge	.+10     	; 0x13a2 <GPIO_setupPinDirection+0x4e>
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	71 f0       	breq	.+28     	; 0x13bc <GPIO_setupPinDirection+0x68>
    13a0:	bc c0       	rjmp	.+376    	; 0x151a <GPIO_setupPinDirection+0x1c6>
    13a2:	2c 81       	ldd	r18, Y+4	; 0x04
    13a4:	3d 81       	ldd	r19, Y+5	; 0x05
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <GPIO_setupPinDirection+0x5a>
    13ac:	5f c0       	rjmp	.+190    	; 0x146c <GPIO_setupPinDirection+0x118>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <GPIO_setupPinDirection+0x66>
    13b8:	85 c0       	rjmp	.+266    	; 0x14c4 <GPIO_setupPinDirection+0x170>
    13ba:	af c0       	rjmp	.+350    	; 0x151a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	a1 f4       	brne	.+40     	; 0x13ea <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13c2:	aa e3       	ldi	r26, 0x3A	; 58
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ea e3       	ldi	r30, 0x3A	; 58
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <GPIO_setupPinDirection+0x8c>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <GPIO_setupPinDirection+0x88>
    13e4:	84 2b       	or	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	98 c0       	rjmp	.+304    	; 0x151a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13ea:	aa e3       	ldi	r26, 0x3A	; 58
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ea e3       	ldi	r30, 0x3A	; 58
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_setupPinDirection+0xb4>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_setupPinDirection+0xb0>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	83 c0       	rjmp	.+262    	; 0x151a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	a1 f4       	brne	.+40     	; 0x1442 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    141a:	a7 e3       	ldi	r26, 0x37	; 55
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e7 e3       	ldi	r30, 0x37	; 55
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_setupPinDirection+0xe4>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_setupPinDirection+0xe0>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	6c c0       	rjmp	.+216    	; 0x151a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1442:	a7 e3       	ldi	r26, 0x37	; 55
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e3       	ldi	r30, 0x37	; 55
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_setupPinDirection+0x10c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_setupPinDirection+0x108>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	57 c0       	rjmp	.+174    	; 0x151a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	a1 f4       	brne	.+40     	; 0x149a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1472:	a4 e3       	ldi	r26, 0x34	; 52
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e4 e3       	ldi	r30, 0x34	; 52
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <GPIO_setupPinDirection+0x13c>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <GPIO_setupPinDirection+0x138>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	40 c0       	rjmp	.+128    	; 0x151a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    149a:	a4 e3       	ldi	r26, 0x34	; 52
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e4 e3       	ldi	r30, 0x34	; 52
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_setupPinDirection+0x164>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_setupPinDirection+0x160>
    14bc:	80 95       	com	r24
    14be:	84 23       	and	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	2b c0       	rjmp	.+86     	; 0x151a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	a1 f4       	brne	.+40     	; 0x14f2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14ca:	a1 e3       	ldi	r26, 0x31	; 49
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e1 e3       	ldi	r30, 0x31	; 49
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <GPIO_setupPinDirection+0x194>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <GPIO_setupPinDirection+0x190>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14f2:	a1 e3       	ldi	r26, 0x31	; 49
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e1 e3       	ldi	r30, 0x31	; 49
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_setupPinDirection+0x1bc>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_setupPinDirection+0x1b8>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_writePin+0x6>
    1530:	00 d0       	rcall	.+0      	; 0x1532 <GPIO_writePin+0x8>
    1532:	0f 92       	push	r0
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
    153c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	88 30       	cpi	r24, 0x08	; 8
    1542:	08 f0       	brcs	.+2      	; 0x1546 <GPIO_writePin+0x1c>
    1544:	d5 c0       	rjmp	.+426    	; 0x16f0 <GPIO_writePin+0x1c6>
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	08 f0       	brcs	.+2      	; 0x154e <GPIO_writePin+0x24>
    154c:	d1 c0       	rjmp	.+418    	; 0x16f0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3d 83       	std	Y+5, r19	; 0x05
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <GPIO_writePin+0x3a>
    1562:	43 c0       	rjmp	.+134    	; 0x15ea <GPIO_writePin+0xc0>
    1564:	2c 81       	ldd	r18, Y+4	; 0x04
    1566:	3d 81       	ldd	r19, Y+5	; 0x05
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	2c f4       	brge	.+10     	; 0x1578 <GPIO_writePin+0x4e>
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	71 f0       	breq	.+28     	; 0x1592 <GPIO_writePin+0x68>
    1576:	bc c0       	rjmp	.+376    	; 0x16f0 <GPIO_writePin+0x1c6>
    1578:	2c 81       	ldd	r18, Y+4	; 0x04
    157a:	3d 81       	ldd	r19, Y+5	; 0x05
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <GPIO_writePin+0x5a>
    1582:	5f c0       	rjmp	.+190    	; 0x1642 <GPIO_writePin+0x118>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <GPIO_writePin+0x66>
    158e:	85 c0       	rjmp	.+266    	; 0x169a <GPIO_writePin+0x170>
    1590:	af c0       	rjmp	.+350    	; 0x16f0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value)
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	88 23       	and	r24, r24
    1596:	a1 f0       	breq	.+40     	; 0x15c0 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1598:	ab e3       	ldi	r26, 0x3B	; 59
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_writePin+0x8c>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_writePin+0x88>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	98 c0       	rjmp	.+304    	; 0x16f0 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    15c0:	ab e3       	ldi	r26, 0x3B	; 59
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e3       	ldi	r30, 0x3B	; 59
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <GPIO_writePin+0xb4>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <GPIO_writePin+0xb0>
    15e2:	80 95       	com	r24
    15e4:	84 23       	and	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	83 c0       	rjmp	.+262    	; 0x16f0 <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if(value)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	88 23       	and	r24, r24
    15ee:	a1 f0       	breq	.+40     	; 0x1618 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    15f0:	a8 e3       	ldi	r26, 0x38	; 56
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e8 e3       	ldi	r30, 0x38	; 56
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_writePin+0xe4>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_writePin+0xe0>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	6c c0       	rjmp	.+216    	; 0x16f0 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    1618:	a8 e3       	ldi	r26, 0x38	; 56
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e8 e3       	ldi	r30, 0x38	; 56
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_writePin+0x10c>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_writePin+0x108>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	57 c0       	rjmp	.+174    	; 0x16f0 <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if(value)
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 23       	and	r24, r24
    1646:	a1 f0       	breq	.+40     	; 0x1670 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1648:	a5 e3       	ldi	r26, 0x35	; 53
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <GPIO_writePin+0x13c>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <GPIO_writePin+0x138>
    166a:	84 2b       	or	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	40 c0       	rjmp	.+128    	; 0x16f0 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    1670:	a5 e3       	ldi	r26, 0x35	; 53
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e3       	ldi	r30, 0x35	; 53
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <GPIO_writePin+0x164>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <GPIO_writePin+0x160>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	2b c0       	rjmp	.+86     	; 0x16f0 <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if(value)
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	88 23       	and	r24, r24
    169e:	a1 f0       	breq	.+40     	; 0x16c8 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    16a0:	a2 e3       	ldi	r26, 0x32	; 50
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e2 e3       	ldi	r30, 0x32	; 50
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_writePin+0x194>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_writePin+0x190>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    16c8:	a2 e3       	ldi	r26, 0x32	; 50
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e2 e3       	ldi	r30, 0x32	; 50
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <GPIO_writePin+0x1bc>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <GPIO_writePin+0x1b8>
    16ea:	80 95       	com	r24
    16ec:	84 23       	and	r24, r20
    16ee:	8c 93       	st	X, r24
			break;
		}
	}

}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	00 d0       	rcall	.+0      	; 0x1706 <GPIO_readPin+0x6>
    1706:	00 d0       	rcall	.+0      	; 0x1708 <GPIO_readPin+0x8>
    1708:	0f 92       	push	r0
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	88 30       	cpi	r24, 0x08	; 8
    1716:	18 f4       	brcc	.+6      	; 0x171e <GPIO_readPin+0x1e>
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	10 f0       	brcs	.+4      	; 0x1722 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    171e:	1d 82       	std	Y+5, r1	; 0x05
    1720:	82 c0       	rjmp	.+260    	; 0x1826 <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3c 83       	std	Y+4, r19	; 0x04
    172a:	2b 83       	std	Y+3, r18	; 0x03
    172c:	4b 81       	ldd	r20, Y+3	; 0x03
    172e:	5c 81       	ldd	r21, Y+4	; 0x04
    1730:	41 30       	cpi	r20, 0x01	; 1
    1732:	51 05       	cpc	r21, r1
    1734:	79 f1       	breq	.+94     	; 0x1794 <GPIO_readPin+0x94>
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	91 05       	cpc	r25, r1
    173e:	34 f4       	brge	.+12     	; 0x174c <GPIO_readPin+0x4c>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	21 15       	cp	r18, r1
    1746:	31 05       	cpc	r19, r1
    1748:	69 f0       	breq	.+26     	; 0x1764 <GPIO_readPin+0x64>
    174a:	6c c0       	rjmp	.+216    	; 0x1824 <GPIO_readPin+0x124>
    174c:	4b 81       	ldd	r20, Y+3	; 0x03
    174e:	5c 81       	ldd	r21, Y+4	; 0x04
    1750:	42 30       	cpi	r20, 0x02	; 2
    1752:	51 05       	cpc	r21, r1
    1754:	b9 f1       	breq	.+110    	; 0x17c4 <GPIO_readPin+0xc4>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <GPIO_readPin+0x62>
    1760:	49 c0       	rjmp	.+146    	; 0x17f4 <GPIO_readPin+0xf4>
    1762:	60 c0       	rjmp	.+192    	; 0x1824 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1764:	e9 e3       	ldi	r30, 0x39	; 57
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a9 01       	movw	r20, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <GPIO_readPin+0x7c>
    1778:	55 95       	asr	r21
    177a:	47 95       	ror	r20
    177c:	8a 95       	dec	r24
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <GPIO_readPin+0x78>
    1780:	ca 01       	movw	r24, r20
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	90 70       	andi	r25, 0x00	; 0
    1786:	88 23       	and	r24, r24
    1788:	19 f0       	breq	.+6      	; 0x1790 <GPIO_readPin+0x90>
				return LOGIC_HIGH;
    178a:	51 e0       	ldi	r21, 0x01	; 1
    178c:	5d 83       	std	Y+5, r21	; 0x05
    178e:	4b c0       	rjmp	.+150    	; 0x1826 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1790:	1d 82       	std	Y+5, r1	; 0x05
    1792:	49 c0       	rjmp	.+146    	; 0x1826 <GPIO_readPin+0x126>
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1794:	e6 e3       	ldi	r30, 0x36	; 54
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a9 01       	movw	r20, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <GPIO_readPin+0xac>
    17a8:	55 95       	asr	r21
    17aa:	47 95       	ror	r20
    17ac:	8a 95       	dec	r24
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <GPIO_readPin+0xa8>
    17b0:	ca 01       	movw	r24, r20
    17b2:	81 70       	andi	r24, 0x01	; 1
    17b4:	90 70       	andi	r25, 0x00	; 0
    17b6:	88 23       	and	r24, r24
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
    17ba:	51 e0       	ldi	r21, 0x01	; 1
    17bc:	5d 83       	std	Y+5, r21	; 0x05
    17be:	33 c0       	rjmp	.+102    	; 0x1826 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    17c0:	1d 82       	std	Y+5, r1	; 0x05
    17c2:	31 c0       	rjmp	.+98     	; 0x1826 <GPIO_readPin+0x126>
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17c4:	e3 e3       	ldi	r30, 0x33	; 51
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <GPIO_readPin+0xdc>
    17d8:	55 95       	asr	r21
    17da:	47 95       	ror	r20
    17dc:	8a 95       	dec	r24
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <GPIO_readPin+0xd8>
    17e0:	ca 01       	movw	r24, r20
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	90 70       	andi	r25, 0x00	; 0
    17e6:	88 23       	and	r24, r24
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
    17ea:	51 e0       	ldi	r21, 0x01	; 1
    17ec:	5d 83       	std	Y+5, r21	; 0x05
    17ee:	1b c0       	rjmp	.+54     	; 0x1826 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    17f0:	1d 82       	std	Y+5, r1	; 0x05
    17f2:	19 c0       	rjmp	.+50     	; 0x1826 <GPIO_readPin+0x126>
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17f4:	e0 e3       	ldi	r30, 0x30	; 48
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a9 01       	movw	r20, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_readPin+0x10c>
    1808:	55 95       	asr	r21
    180a:	47 95       	ror	r20
    180c:	8a 95       	dec	r24
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_readPin+0x108>
    1810:	ca 01       	movw	r24, r20
    1812:	81 70       	andi	r24, 0x01	; 1
    1814:	90 70       	andi	r25, 0x00	; 0
    1816:	88 23       	and	r24, r24
    1818:	19 f0       	breq	.+6      	; 0x1820 <GPIO_readPin+0x120>
				return LOGIC_HIGH;
    181a:	51 e0       	ldi	r21, 0x01	; 1
    181c:	5d 83       	std	Y+5, r21	; 0x05
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1820:	1d 82       	std	Y+5, r1	; 0x05
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <GPIO_readPin+0x126>
		}
		return LOGIC_LOW;
    1824:	1d 82       	std	Y+5, r1	; 0x05
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
	}


}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <GPIO_setupPortDirection+0x6>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <GPIO_setupPortDirection+0x8>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	90 f5       	brcc	.+100    	; 0x18b2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3c 83       	std	Y+4, r19	; 0x04
    1856:	2b 83       	std	Y+3, r18	; 0x03
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	d1 f0       	breq	.+52     	; 0x1896 <GPIO_setupPortDirection+0x5e>
    1862:	2b 81       	ldd	r18, Y+3	; 0x03
    1864:	3c 81       	ldd	r19, Y+4	; 0x04
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <GPIO_setupPortDirection+0x3e>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	61 f0       	breq	.+24     	; 0x188c <GPIO_setupPortDirection+0x54>
    1874:	1e c0       	rjmp	.+60     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	3c 81       	ldd	r19, Y+4	; 0x04
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	81 f0       	breq	.+32     	; 0x18a0 <GPIO_setupPortDirection+0x68>
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	81 f0       	breq	.+32     	; 0x18aa <GPIO_setupPortDirection+0x72>
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    188c:	ea e3       	ldi	r30, 0x3A	; 58
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	80 83       	st	Z, r24
    1894:	0e c0       	rjmp	.+28     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1896:	e7 e3       	ldi	r30, 0x37	; 55
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	80 83       	st	Z, r24
    189e:	09 c0       	rjmp	.+18     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18a0:	e4 e3       	ldi	r30, 0x34	; 52
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	80 83       	st	Z, r24
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18aa:	e1 e3       	ldi	r30, 0x31	; 49
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <GPIO_writePort+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <GPIO_writePort+0x8>
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	90 f5       	brcc	.+100    	; 0x193a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	3c 83       	std	Y+4, r19	; 0x04
    18de:	2b 83       	std	Y+3, r18	; 0x03
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	91 05       	cpc	r25, r1
    18e8:	d1 f0       	breq	.+52     	; 0x191e <GPIO_writePort+0x5e>
    18ea:	2b 81       	ldd	r18, Y+3	; 0x03
    18ec:	3c 81       	ldd	r19, Y+4	; 0x04
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	2c f4       	brge	.+10     	; 0x18fe <GPIO_writePort+0x3e>
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	61 f0       	breq	.+24     	; 0x1914 <GPIO_writePort+0x54>
    18fc:	1e c0       	rjmp	.+60     	; 0x193a <GPIO_writePort+0x7a>
    18fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1900:	3c 81       	ldd	r19, Y+4	; 0x04
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	81 f0       	breq	.+32     	; 0x1928 <GPIO_writePort+0x68>
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	83 30       	cpi	r24, 0x03	; 3
    190e:	91 05       	cpc	r25, r1
    1910:	81 f0       	breq	.+32     	; 0x1932 <GPIO_writePort+0x72>
    1912:	13 c0       	rjmp	.+38     	; 0x193a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1914:	eb e3       	ldi	r30, 0x3B	; 59
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	80 83       	st	Z, r24
    191c:	0e c0       	rjmp	.+28     	; 0x193a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    191e:	e8 e3       	ldi	r30, 0x38	; 56
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	80 83       	st	Z, r24
    1926:	09 c0       	rjmp	.+18     	; 0x193a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1928:	e5 e3       	ldi	r30, 0x35	; 53
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	80 83       	st	Z, r24
    1930:	04 c0       	rjmp	.+8      	; 0x193a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1932:	e2 e3       	ldi	r30, 0x32	; 50
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	80 83       	st	Z, r24
			break;
		}
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <GPIO_readPort+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <GPIO_readPort+0x8>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	10 f0       	brcs	.+4      	; 0x1960 <GPIO_readPort+0x18>
	{
		return LOGIC_LOW;
    195c:	1c 82       	std	Y+4, r1	; 0x04
    195e:	34 c0       	rjmp	.+104    	; 0x19c8 <GPIO_readPort+0x80>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3b 83       	std	Y+3, r19	; 0x03
    1968:	2a 83       	std	Y+2, r18	; 0x02
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	d1 f0       	breq	.+52     	; 0x19a8 <GPIO_readPort+0x60>
    1974:	2a 81       	ldd	r18, Y+2	; 0x02
    1976:	3b 81       	ldd	r19, Y+3	; 0x03
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	2c f4       	brge	.+10     	; 0x1988 <GPIO_readPort+0x40>
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	61 f0       	breq	.+24     	; 0x199e <GPIO_readPort+0x56>
    1986:	1f c0       	rjmp	.+62     	; 0x19c6 <GPIO_readPort+0x7e>
    1988:	2a 81       	ldd	r18, Y+2	; 0x02
    198a:	3b 81       	ldd	r19, Y+3	; 0x03
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	81 f0       	breq	.+32     	; 0x19b2 <GPIO_readPort+0x6a>
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	9b 81       	ldd	r25, Y+3	; 0x03
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	91 05       	cpc	r25, r1
    199a:	81 f0       	breq	.+32     	; 0x19bc <GPIO_readPort+0x74>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PORTA;
    199e:	eb e3       	ldi	r30, 0x3B	; 59
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	90 81       	ld	r25, Z
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <GPIO_readPort+0x80>
		case PORTB_ID:
			return PORTB;
    19a8:	e8 e3       	ldi	r30, 0x38	; 56
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	20 81       	ld	r18, Z
    19ae:	2c 83       	std	Y+4, r18	; 0x04
    19b0:	0b c0       	rjmp	.+22     	; 0x19c8 <GPIO_readPort+0x80>
		case PORTC_ID:
			return PORTC;
    19b2:	e5 e3       	ldi	r30, 0x35	; 53
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	30 81       	ld	r19, Z
    19b8:	3c 83       	std	Y+4, r19	; 0x04
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <GPIO_readPort+0x80>
		case PORTD_ID:
			return PORTD;
    19bc:	e2 e3       	ldi	r30, 0x32	; 50
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8c 83       	std	Y+4, r24	; 0x04
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <GPIO_readPort+0x80>
		}
		return LOGIC_LOW;
    19c6:	1c 82       	std	Y+4, r1	; 0x04
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <PWM_Timer0_Start>:
➢ Setup the direction for OC0 as output pin through the GPIO driver.
➢ The generated PWM signal frequency will be 500Hz to control the DC
Motor speed
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	89 83       	std	Y+1, r24	; 0x01
	/* configure the timer*/
	/* Set Timer Initial Value to 0*/
	TCNT0 = 0;
    19e4:	e2 e5       	ldi	r30, 0x52	; 82
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	10 82       	st	Z, r1
	/*Fast PWM mode FOC0=0 (Active only when the WGM00 bit specifies a non-PWM mode)*/
	CLEAR_BIT(TCCR0,FOC0);
    19ea:	a3 e5       	ldi	r26, 0x53	; 83
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e3 e5       	ldi	r30, 0x53	; 83
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8f 77       	andi	r24, 0x7F	; 127
    19f6:	8c 93       	st	X, r24
	/*Fast PWM Mode WGM01=1 & WGM00=1*/
	SET_BIT(TCCR0,WGM00);
    19f8:	a3 e5       	ldi	r26, 0x53	; 83
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e3 e5       	ldi	r30, 0x53	; 83
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	80 64       	ori	r24, 0x40	; 64
    1a04:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    1a06:	a3 e5       	ldi	r26, 0x53	; 83
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e3 e5       	ldi	r30, 0x53	; 83
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	8c 93       	st	X, r24
	/*Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1*/
	SET_BIT(TCCR0,COM01);
    1a14:	a3 e5       	ldi	r26, 0x53	; 83
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e3 e5       	ldi	r30, 0x53	; 83
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 62       	ori	r24, 0x20	; 32
    1a20:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM00);
    1a22:	a3 e5       	ldi	r26, 0x53	; 83
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e3 e5       	ldi	r30, 0x53	; 83
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8f 7e       	andi	r24, 0xEF	; 239
    1a2e:	8c 93       	st	X, r24
	/*Clock = F_CPU/8 CS00=0 CS01=1 CS02=0*/
	CLEAR_BIT(TCCR0,CS00);
    1a30:	a3 e5       	ldi	r26, 0x53	; 83
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e3 e5       	ldi	r30, 0x53	; 83
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8e 7f       	andi	r24, 0xFE	; 254
    1a3c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    1a3e:	a3 e5       	ldi	r26, 0x53	; 83
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e3 e5       	ldi	r30, 0x53	; 83
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	82 60       	ori	r24, 0x02	; 2
    1a4a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    1a4c:	a3 e5       	ldi	r26, 0x53	; 83
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e3 e5       	ldi	r30, 0x53	; 83
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	8b 7f       	andi	r24, 0xFB	; 251
    1a58:	8c 93       	st	X, r24
	/*Set Compare value*/
	OCR0  =(uint8)((uint16)(duty_cycle*255) /100);
    1a5a:	ec e5       	ldi	r30, 0x5C	; 92
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	48 2f       	mov	r20, r24
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	ca 01       	movw	r24, r20
    1a66:	9c 01       	movw	r18, r24
    1a68:	22 0f       	add	r18, r18
    1a6a:	33 1f       	adc	r19, r19
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	96 95       	lsr	r25
    1a70:	98 2f       	mov	r25, r24
    1a72:	88 27       	eor	r24, r24
    1a74:	97 95       	ror	r25
    1a76:	87 95       	ror	r24
    1a78:	82 1b       	sub	r24, r18
    1a7a:	93 0b       	sbc	r25, r19
    1a7c:	84 0f       	add	r24, r20
    1a7e:	95 1f       	adc	r25, r21
    1a80:	24 e6       	ldi	r18, 0x64	; 100
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	b9 01       	movw	r22, r18
    1a86:	0e 94 2f 11 	call	0x225e	; 0x225e <__udivmodhi4>
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	80 83       	st	Z, r24
	/*Set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.*/
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	63 e0       	ldi	r22, 0x03	; 3
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 aa 09 	call	0x1354	; 0x1354 <GPIO_setupPinDirection>

}
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <__vector_7>:
/*******************************************************************************
 *                              ISR                                    *
 *******************************************************************************/
/*ISR FOR COMPORE MODE  */
ISR(TIMER1_COMPA_vect)
{
    1aa0:	1f 92       	push	r1
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	0f 92       	push	r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	2f 93       	push	r18
    1aac:	3f 93       	push	r19
    1aae:	4f 93       	push	r20
    1ab0:	5f 93       	push	r21
    1ab2:	6f 93       	push	r22
    1ab4:	7f 93       	push	r23
    1ab6:	8f 93       	push	r24
    1ab8:	9f 93       	push	r25
    1aba:	af 93       	push	r26
    1abc:	bf 93       	push	r27
    1abe:	ef 93       	push	r30
    1ac0:	ff 93       	push	r31
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1aca:	80 91 83 00 	lds	r24, 0x0083
    1ace:	90 91 84 00 	lds	r25, 0x0084
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	29 f0       	breq	.+10     	; 0x1ae0 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1ad6:	e0 91 83 00 	lds	r30, 0x0083
    1ada:	f0 91 84 00 	lds	r31, 0x0084
    1ade:	09 95       	icall
	}
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	ff 91       	pop	r31
    1ae6:	ef 91       	pop	r30
    1ae8:	bf 91       	pop	r27
    1aea:	af 91       	pop	r26
    1aec:	9f 91       	pop	r25
    1aee:	8f 91       	pop	r24
    1af0:	7f 91       	pop	r23
    1af2:	6f 91       	pop	r22
    1af4:	5f 91       	pop	r21
    1af6:	4f 91       	pop	r20
    1af8:	3f 91       	pop	r19
    1afa:	2f 91       	pop	r18
    1afc:	0f 90       	pop	r0
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	0f 90       	pop	r0
    1b02:	1f 90       	pop	r1
    1b04:	18 95       	reti

00001b06 <__vector_9>:

/*ISR FOR OVERFLOW MODE  */
ISR(TIMER1_OVF_vect)
{
    1b06:	1f 92       	push	r1
    1b08:	0f 92       	push	r0
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	0f 92       	push	r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	2f 93       	push	r18
    1b12:	3f 93       	push	r19
    1b14:	4f 93       	push	r20
    1b16:	5f 93       	push	r21
    1b18:	6f 93       	push	r22
    1b1a:	7f 93       	push	r23
    1b1c:	8f 93       	push	r24
    1b1e:	9f 93       	push	r25
    1b20:	af 93       	push	r26
    1b22:	bf 93       	push	r27
    1b24:	ef 93       	push	r30
    1b26:	ff 93       	push	r31
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b30:	80 91 83 00 	lds	r24, 0x0083
    1b34:	90 91 84 00 	lds	r25, 0x0084
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	29 f0       	breq	.+10     	; 0x1b46 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1b3c:	e0 91 83 00 	lds	r30, 0x0083
    1b40:	f0 91 84 00 	lds	r31, 0x0084
    1b44:	09 95       	icall
	}

}
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	ff 91       	pop	r31
    1b4c:	ef 91       	pop	r30
    1b4e:	bf 91       	pop	r27
    1b50:	af 91       	pop	r26
    1b52:	9f 91       	pop	r25
    1b54:	8f 91       	pop	r24
    1b56:	7f 91       	pop	r23
    1b58:	6f 91       	pop	r22
    1b5a:	5f 91       	pop	r21
    1b5c:	4f 91       	pop	r20
    1b5e:	3f 91       	pop	r19
    1b60:	2f 91       	pop	r18
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	0f 90       	pop	r0
    1b68:	1f 90       	pop	r1
    1b6a:	18 95       	reti

00001b6c <Timer1_init>:
 *******************************************************************************/

/* Description
⮚ Function to initialize the Timer driver*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <Timer1_init+0x6>
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <Timer1_init+0x8>
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	/* TCCR1A SETTING
	 * Normal port operation, OC1A/OC1B disconnected COM1A1/COM1B1=0 and COM1A0/COM1B0=0
	 * FOC1A=1 FOC1B=0 for non-PWM mode*/
	TCCR1A=0x08;
    1b7c:	ef e4       	ldi	r30, 0x4F	; 79
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	88 e0       	ldi	r24, 0x08	; 8
    1b82:	80 83       	st	Z, r24

	//Select the prescaler
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1b84:	ae e4       	ldi	r26, 0x4E	; 78
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ee e4       	ldi	r30, 0x4E	; 78
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	98 2f       	mov	r25, r24
    1b90:	98 7f       	andi	r25, 0xF8	; 248
    1b92:	e9 81       	ldd	r30, Y+1	; 0x01
    1b94:	fa 81       	ldd	r31, Y+2	; 0x02
    1b96:	84 81       	ldd	r24, Z+4	; 0x04
    1b98:	89 2b       	or	r24, r25
    1b9a:	8c 93       	st	X, r24

	//Select the TIMER1 MODE
	switch(Config_Ptr->mode)
    1b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba0:	85 81       	ldd	r24, Z+5	; 0x05
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3c 83       	std	Y+4, r19	; 0x04
    1ba8:	2b 83       	std	Y+3, r18	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	31 f0       	breq	.+12     	; 0x1bbe <Timer1_init+0x52>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	24 30       	cpi	r18, 0x04	; 4
    1bb8:	31 05       	cpc	r19, r1
    1bba:	71 f1       	breq	.+92     	; 0x1c18 <Timer1_init+0xac>
    1bbc:	5d c0       	rjmp	.+186    	; 0x1c78 <Timer1_init+0x10c>
	{
	case NORMAL_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    1bbe:	af e4       	ldi	r26, 0x4F	; 79
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ef e4       	ldi	r30, 0x4F	; 79
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    1bcc:	af e4       	ldi	r26, 0x4F	; 79
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ef e4       	ldi	r30, 0x4F	; 79
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    1bda:	ae e4       	ldi	r26, 0x4E	; 78
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ee e4       	ldi	r30, 0x4E	; 78
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	87 7f       	andi	r24, 0xF7	; 247
    1be6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    1be8:	ae e4       	ldi	r26, 0x4E	; 78
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ee e4       	ldi	r30, 0x4E	; 78
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8f 7e       	andi	r24, 0xEF	; 239
    1bf4:	8c 93       	st	X, r24
		//put the initial value in TCNT1
		TCNT1=Config_Ptr->initial_value;
    1bf6:	ac e4       	ldi	r26, 0x4C	; 76
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	11 96       	adiw	r26, 0x01	; 1
    1c04:	9c 93       	st	X, r25
    1c06:	8e 93       	st	-X, r24
		//Enable Overflow Interrupt
		SET_BIT(TIMSK,TOIE1);
    1c08:	a9 e5       	ldi	r26, 0x59	; 89
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e9 e5       	ldi	r30, 0x59	; 89
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	84 60       	ori	r24, 0x04	; 4
    1c14:	8c 93       	st	X, r24
    1c16:	30 c0       	rjmp	.+96     	; 0x1c78 <Timer1_init+0x10c>
		break;

	case COMPARE_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    1c18:	af e4       	ldi	r26, 0x4F	; 79
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ef e4       	ldi	r30, 0x4F	; 79
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8e 7f       	andi	r24, 0xFE	; 254
    1c24:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    1c26:	af e4       	ldi	r26, 0x4F	; 79
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ef e4       	ldi	r30, 0x4F	; 79
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8d 7f       	andi	r24, 0xFD	; 253
    1c32:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1c34:	ae e4       	ldi	r26, 0x4E	; 78
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ee e4       	ldi	r30, 0x4E	; 78
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 60       	ori	r24, 0x08	; 8
    1c40:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    1c42:	ae e4       	ldi	r26, 0x4E	; 78
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ee e4       	ldi	r30, 0x4E	; 78
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8f 7e       	andi	r24, 0xEF	; 239
    1c4e:	8c 93       	st	X, r24
		//put the compare value in OCR1A
		TCNT1 = 0;
    1c50:	ec e4       	ldi	r30, 0x4C	; 76
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	11 82       	std	Z+1, r1	; 0x01
    1c56:	10 82       	st	Z, r1
		OCR1A=Config_Ptr->compare_value;
    1c58:	aa e4       	ldi	r26, 0x4A	; 74
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	11 96       	adiw	r26, 0x01	; 1
    1c66:	9c 93       	st	X, r25
    1c68:	8e 93       	st	-X, r24
		//Enable Output Compare A Match Interrupt
		SET_BIT(TIMSK,OCIE1A);
    1c6a:	a9 e5       	ldi	r26, 0x59	; 89
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e9 e5       	ldi	r30, 0x59	; 89
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 61       	ori	r24, 0x10	; 16
    1c76:	8c 93       	st	X, r24
		break;
	}
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <Timer1_deInit>:

/*Description
⮚ Function to disable the Timer1.*/
void Timer1_deInit(void)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1c8e:	ef e4       	ldi	r30, 0x4F	; 79
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	10 82       	st	Z, r1
	TCCR1B=0;
    1c94:	ee e4       	ldi	r30, 0x4E	; 78
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	10 82       	st	Z, r1
	OCR1A=0;
    1c9a:	ea e4       	ldi	r30, 0x4A	; 74
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	11 82       	std	Z+1, r1	; 0x01
    1ca0:	10 82       	st	Z, r1
	TCNT1=0;
    1ca2:	ec e4       	ldi	r30, 0x4C	; 76
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	11 82       	std	Z+1, r1	; 0x01
    1ca8:	10 82       	st	Z, r1
	TIMSK=TIMSK&0xC3;
    1caa:	a9 e5       	ldi	r26, 0x59	; 89
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e9 e5       	ldi	r30, 0x59	; 89
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	83 7c       	andi	r24, 0xC3	; 195
    1cb6:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1cb8:	10 92 84 00 	sts	0x0084, r1
    1cbc:	10 92 83 00 	sts	0x0083, r1
}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <Timer1_setCallBack>:

/*Description
⮚ Function to set the Call Back function address.*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <Timer1_setCallBack+0x6>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	90 93 84 00 	sts	0x0084, r25
    1cdc:	80 93 83 00 	sts	0x0083, r24
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <TWI_init+0x6>
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <TWI_init+0x8>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 400.000 kbps or 100.00 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	switch(Config_Ptr->bit_rate)
    1cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfe:	81 81       	ldd	r24, Z+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <TWI_init+0x32>
    1d10:	2b 81       	ldd	r18, Y+3	; 0x03
    1d12:	3c 81       	ldd	r19, Y+4	; 0x04
    1d14:	21 30       	cpi	r18, 0x01	; 1
    1d16:	31 05       	cpc	r19, r1
    1d18:	31 f0       	breq	.+12     	; 0x1d26 <TWI_init+0x3c>
    1d1a:	09 c0       	rjmp	.+18     	; 0x1d2e <TWI_init+0x44>
	{
	case NORMAL_MODE_100_KB_PER_SEC:
		TWBR = 32;
    1d1c:	e0 e2       	ldi	r30, 0x20	; 32
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	80 83       	st	Z, r24
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <TWI_init+0x44>
		break;
	case FAST_MODE_400_KB_PER_SEC:
		TWBR = 0x02;
    1d26:	e0 e2       	ldi	r30, 0x20	; 32
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	80 83       	st	Z, r24
		break;
	}
	TWSR = 0x00;
    1d2e:	e1 e2       	ldi	r30, 0x21	; 33
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	10 82       	st	Z, r1
	/* Two Wire Bus address my address if any master device want to call me: my address = Config_Ptr->address (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR =  (Config_Ptr->address <<1) ; // my address = Config_Ptr->address (127:0)
    1d34:	a2 e2       	ldi	r26, 0x22	; 34
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 0f       	add	r24, r24
    1d40:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    1d42:	e6 e5       	ldi	r30, 0x56	; 86
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	84 e0       	ldi	r24, 0x04	; 4
    1d48:	80 83       	st	Z, r24
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <TWI_start>:

void TWI_start(void)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1d60:	e6 e5       	ldi	r30, 0x56	; 86
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	84 ea       	ldi	r24, 0xA4	; 164
    1d66:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1d68:	e6 e5       	ldi	r30, 0x56	; 86
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	dc f7       	brge	.-10     	; 0x1d68 <TWI_start+0x10>
}
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <TWI_stop>:

void TWI_stop(void)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1d80:	e6 e5       	ldi	r30, 0x56	; 86
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	84 e9       	ldi	r24, 0x94	; 148
    1d86:	80 83       	st	Z, r24
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1d9a:	e3 e2       	ldi	r30, 0x23	; 35
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    1da2:	e6 e5       	ldi	r30, 0x56	; 86
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	84 e8       	ldi	r24, 0x84	; 132
    1da8:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1daa:	e6 e5       	ldi	r30, 0x56	; 86
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	88 23       	and	r24, r24
    1db2:	dc f7       	brge	.-10     	; 0x1daa <TWI_writeByte+0x1c>
}
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1dc4:	e6 e5       	ldi	r30, 0x56	; 86
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	84 ec       	ldi	r24, 0xC4	; 196
    1dca:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1dcc:	e6 e5       	ldi	r30, 0x56	; 86
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 23       	and	r24, r24
    1dd4:	dc f7       	brge	.-10     	; 0x1dcc <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    1dd6:	e3 e2       	ldi	r30, 0x23	; 35
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1dea:	e6 e5       	ldi	r30, 0x56	; 86
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	84 e8       	ldi	r24, 0x84	; 132
    1df0:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1df2:	e6 e5       	ldi	r30, 0x56	; 86
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 23       	and	r24, r24
    1dfa:	dc f7       	brge	.-10     	; 0x1df2 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    1dfc:	e3 e2       	ldi	r30, 0x23	; 35
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	0f 92       	push	r0
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1e12:	e1 e2       	ldi	r30, 0x21	; 33
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	88 7f       	andi	r24, 0xF8	; 248
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	28 97       	sbiw	r28, 0x08	; 8
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1e3e:	1a 82       	std	Y+2, r1	; 0x02
    1e40:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1e42:	eb e2       	ldi	r30, 0x2B	; 43
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	80 83       	st	Z, r24
	/************************** UCSRB Description *************************
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1e4a:	ea e2       	ldi	r30, 0x2A	; 42
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	88 e1       	ldi	r24, 0x18	; 24
    1e50:	80 83       	st	Z, r24

	/* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    1e52:	a0 e4       	ldi	r26, 0x40	; 64
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e0 e4       	ldi	r30, 0x40	; 64
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 68       	ori	r24, 0x80	; 128
    1e5e:	8c 93       	st	X, r24

	/* when USBS= 0 One stop bit
	   when USBS= 1 TWO stop bits
	 */
	if(Config_Ptr->stop_bit)
    1e60:	eb 81       	ldd	r30, Y+3	; 0x03
    1e62:	fc 81       	ldd	r31, Y+4	; 0x04
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	88 23       	and	r24, r24
    1e68:	41 f0       	breq	.+16     	; 0x1e7a <UART_init+0x54>
		SET_BIT(UCSRC,USBS);
    1e6a:	a0 e4       	ldi	r26, 0x40	; 64
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e0 e4       	ldi	r30, 0x40	; 64
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	88 60       	ori	r24, 0x08	; 8
    1e76:	8c 93       	st	X, r24
    1e78:	07 c0       	rjmp	.+14     	; 0x1e88 <UART_init+0x62>
	else
		CLEAR_BIT(UCSRC,USBS);
    1e7a:	a0 e4       	ldi	r26, 0x40	; 64
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e0 e4       	ldi	r30, 0x40	; 64
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	87 7f       	andi	r24, 0xF7	; 247
    1e86:	8c 93       	st	X, r24

	/* when UPM0= 0 and UPM1=0 DISABLED
	 * when UPM0= 0 and UPM1=1 EVEN_PARITY
	 * when UPM0= 1 and UPM1=1 ODD_PARITY
	 */
	switch(Config_Ptr->parity)
    1e88:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e8c:	81 81       	ldd	r24, Z+1	; 0x01
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	38 87       	std	Y+8, r19	; 0x08
    1e94:	2f 83       	std	Y+7, r18	; 0x07
    1e96:	8f 81       	ldd	r24, Y+7	; 0x07
    1e98:	98 85       	ldd	r25, Y+8	; 0x08
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	c1 f0       	breq	.+48     	; 0x1ed0 <UART_init+0xaa>
    1ea0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea2:	38 85       	ldd	r19, Y+8	; 0x08
    1ea4:	23 30       	cpi	r18, 0x03	; 3
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	11 f1       	breq	.+68     	; 0x1eee <UART_init+0xc8>
    1eaa:	8f 81       	ldd	r24, Y+7	; 0x07
    1eac:	98 85       	ldd	r25, Y+8	; 0x08
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	61 f5       	brne	.+88     	; 0x1f0a <UART_init+0xe4>
	{
	case DISABLED:
		CLEAR_BIT(UCSRC,UPM0);
    1eb2:	a0 e4       	ldi	r26, 0x40	; 64
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e0 e4       	ldi	r30, 0x40	; 64
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 7e       	andi	r24, 0xEF	; 239
    1ebe:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1ec0:	a0 e4       	ldi	r26, 0x40	; 64
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e0 e4       	ldi	r30, 0x40	; 64
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	8f 7d       	andi	r24, 0xDF	; 223
    1ecc:	8c 93       	st	X, r24
    1ece:	1d c0       	rjmp	.+58     	; 0x1f0a <UART_init+0xe4>
		break;
	case EVEN_PARITY:
		SET_BIT(UCSRC,UPM0);
    1ed0:	a0 e4       	ldi	r26, 0x40	; 64
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e0 e4       	ldi	r30, 0x40	; 64
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 61       	ori	r24, 0x10	; 16
    1edc:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1ede:	a0 e4       	ldi	r26, 0x40	; 64
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e0 e4       	ldi	r30, 0x40	; 64
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8f 7d       	andi	r24, 0xDF	; 223
    1eea:	8c 93       	st	X, r24
    1eec:	0e c0       	rjmp	.+28     	; 0x1f0a <UART_init+0xe4>
		break;
	case ODD_PARITY:
		SET_BIT(UCSRC,UPM0);
    1eee:	a0 e4       	ldi	r26, 0x40	; 64
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e0 e4       	ldi	r30, 0x40	; 64
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 61       	ori	r24, 0x10	; 16
    1efa:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    1efc:	a0 e4       	ldi	r26, 0x40	; 64
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e0 e4       	ldi	r30, 0x40	; 64
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 62       	ori	r24, 0x20	; 32
    1f08:	8c 93       	st	X, r24
	   when UCSZ0= 1 , UCSZ1=0 ,and UCSZ2=0  6_bits
	   when UCSZ0= 0 , UCSZ1=1 ,and UCSZ2=0  7_bits
	   when UCSZ0= 1 , UCSZ1=1 ,and UCSZ2=0  8_bits
	   when UCSZ0= 1 , UCSZ1=1 ,and UCSZ2=1  9_bits
	 */
	switch(Config_Ptr->bit_data)
    1f0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0e:	80 81       	ld	r24, Z
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3e 83       	std	Y+6, r19	; 0x06
    1f16:	2d 83       	std	Y+5, r18	; 0x05
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <UART_init+0xfe>
    1f22:	48 c0       	rjmp	.+144    	; 0x1fb4 <UART_init+0x18e>
    1f24:	2d 81       	ldd	r18, Y+5	; 0x05
    1f26:	3e 81       	ldd	r19, Y+6	; 0x06
    1f28:	23 30       	cpi	r18, 0x03	; 3
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	54 f4       	brge	.+20     	; 0x1f42 <UART_init+0x11c>
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	99 f0       	breq	.+38     	; 0x1f5c <UART_init+0x136>
    1f36:	2d 81       	ldd	r18, Y+5	; 0x05
    1f38:	3e 81       	ldd	r19, Y+6	; 0x06
    1f3a:	21 30       	cpi	r18, 0x01	; 1
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	21 f1       	breq	.+72     	; 0x1f88 <UART_init+0x162>
    1f40:	7a c0       	rjmp	.+244    	; 0x2036 <UART_init+0x210>
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	91 05       	cpc	r25, r1
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <UART_init+0x128>
    1f4c:	49 c0       	rjmp	.+146    	; 0x1fe0 <UART_init+0x1ba>
    1f4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f50:	3e 81       	ldd	r19, Y+6	; 0x06
    1f52:	27 30       	cpi	r18, 0x07	; 7
    1f54:	31 05       	cpc	r19, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <UART_init+0x134>
    1f58:	59 c0       	rjmp	.+178    	; 0x200c <UART_init+0x1e6>
    1f5a:	6d c0       	rjmp	.+218    	; 0x2036 <UART_init+0x210>
	{
	case FIVE_BITS:
		CLEAR_BIT(UCSRC,UCSZ0);
    1f5c:	a0 e4       	ldi	r26, 0x40	; 64
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e0 e4       	ldi	r30, 0x40	; 64
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8d 7f       	andi	r24, 0xFD	; 253
    1f68:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    1f6a:	a0 e4       	ldi	r26, 0x40	; 64
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e0 e4       	ldi	r30, 0x40	; 64
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8b 7f       	andi	r24, 0xFB	; 251
    1f76:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1f78:	aa e2       	ldi	r26, 0x2A	; 42
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	ea e2       	ldi	r30, 0x2A	; 42
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8b 7f       	andi	r24, 0xFB	; 251
    1f84:	8c 93       	st	X, r24
    1f86:	57 c0       	rjmp	.+174    	; 0x2036 <UART_init+0x210>
		break;
	case SIX_BITS:
		SET_BIT(UCSRC,UCSZ0);
    1f88:	a0 e4       	ldi	r26, 0x40	; 64
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e0 e4       	ldi	r30, 0x40	; 64
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	82 60       	ori	r24, 0x02	; 2
    1f94:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    1f96:	a0 e4       	ldi	r26, 0x40	; 64
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e0 e4       	ldi	r30, 0x40	; 64
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8b 7f       	andi	r24, 0xFB	; 251
    1fa2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1fa4:	aa e2       	ldi	r26, 0x2A	; 42
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ea e2       	ldi	r30, 0x2A	; 42
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8b 7f       	andi	r24, 0xFB	; 251
    1fb0:	8c 93       	st	X, r24
    1fb2:	41 c0       	rjmp	.+130    	; 0x2036 <UART_init+0x210>
		break;
	case SEVEN_BITS:
		CLEAR_BIT(UCSRC,UCSZ0);
    1fb4:	a0 e4       	ldi	r26, 0x40	; 64
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e0 e4       	ldi	r30, 0x40	; 64
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8d 7f       	andi	r24, 0xFD	; 253
    1fc0:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1fc2:	a0 e4       	ldi	r26, 0x40	; 64
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e0 e4       	ldi	r30, 0x40	; 64
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	84 60       	ori	r24, 0x04	; 4
    1fce:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1fd0:	aa e2       	ldi	r26, 0x2A	; 42
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	ea e2       	ldi	r30, 0x2A	; 42
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8b 7f       	andi	r24, 0xFB	; 251
    1fdc:	8c 93       	st	X, r24
    1fde:	2b c0       	rjmp	.+86     	; 0x2036 <UART_init+0x210>
		break;
	case EIGHT_BITS:
		SET_BIT(UCSRC,UCSZ0);
    1fe0:	a0 e4       	ldi	r26, 0x40	; 64
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e0 e4       	ldi	r30, 0x40	; 64
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 60       	ori	r24, 0x02	; 2
    1fec:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1fee:	a0 e4       	ldi	r26, 0x40	; 64
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e0 e4       	ldi	r30, 0x40	; 64
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	84 60       	ori	r24, 0x04	; 4
    1ffa:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1ffc:	aa e2       	ldi	r26, 0x2A	; 42
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	ea e2       	ldi	r30, 0x2A	; 42
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8b 7f       	andi	r24, 0xFB	; 251
    2008:	8c 93       	st	X, r24
    200a:	15 c0       	rjmp	.+42     	; 0x2036 <UART_init+0x210>
		break;
	case NINE_BITS:
		SET_BIT(UCSRC,UCSZ0);
    200c:	a0 e4       	ldi	r26, 0x40	; 64
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e0 e4       	ldi	r30, 0x40	; 64
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	82 60       	ori	r24, 0x02	; 2
    2018:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    201a:	a0 e4       	ldi	r26, 0x40	; 64
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e0 e4       	ldi	r30, 0x40	; 64
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	84 60       	ori	r24, 0x04	; 4
    2026:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    2028:	aa e2       	ldi	r26, 0x2A	; 42
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	ea e2       	ldi	r30, 0x2A	; 42
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	84 60       	ori	r24, 0x04	; 4
    2034:	8c 93       	st	X, r24
		break;
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2036:	eb 81       	ldd	r30, Y+3	; 0x03
    2038:	fc 81       	ldd	r31, Y+4	; 0x04
    203a:	83 81       	ldd	r24, Z+3	; 0x03
    203c:	94 81       	ldd	r25, Z+4	; 0x04
    203e:	a5 81       	ldd	r26, Z+5	; 0x05
    2040:	b6 81       	ldd	r27, Z+6	; 0x06
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	aa 1f       	adc	r26, r26
    2048:	bb 1f       	adc	r27, r27
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	aa 1f       	adc	r26, r26
    2050:	bb 1f       	adc	r27, r27
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	aa 1f       	adc	r26, r26
    2058:	bb 1f       	adc	r27, r27
    205a:	9c 01       	movw	r18, r24
    205c:	ad 01       	movw	r20, r26
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	92 e1       	ldi	r25, 0x12	; 18
    2062:	aa e7       	ldi	r26, 0x7A	; 122
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 43 11 	call	0x2286	; 0x2286 <__udivmodsi4>
    206e:	da 01       	movw	r26, r20
    2070:	c9 01       	movw	r24, r18
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2078:	e0 e4       	ldi	r30, 0x40	; 64
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	89 2f       	mov	r24, r25
    2082:	99 27       	eor	r25, r25
    2084:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2086:	e9 e2       	ldi	r30, 0x29	; 41
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	80 83       	st	Z, r24
}
    208e:	28 96       	adiw	r28, 0x08	; 8
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	0f 92       	push	r0
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    20ac:	eb e2       	ldi	r30, 0x2B	; 43
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	80 72       	andi	r24, 0x20	; 32
    20b8:	90 70       	andi	r25, 0x00	; 0
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	b9 f3       	breq	.-18     	; 0x20ac <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    20be:	ec e2       	ldi	r30, 0x2C	; 44
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <UART_sendArrayOfByte>:
/*
 * Description :
 * Functional responsible for send array of byte to another UART device.
 */
void UART_sendArrayOfByte(const uint8 *data,uint8 length)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <UART_sendArrayOfByte+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <UART_sendArrayOfByte+0x8>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	9b 83       	std	Y+3, r25	; 0x03
    20dc:	8a 83       	std	Y+2, r24	; 0x02
    20de:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0 ; i<length;i++)
    20e0:	19 82       	std	Y+1, r1	; 0x01
    20e2:	0e c0       	rjmp	.+28     	; 0x2100 <UART_sendArrayOfByte+0x32>
	{
		UART_sendByte(data[i]);
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	fc 01       	movw	r30, r24
    20f0:	e2 0f       	add	r30, r18
    20f2:	f3 1f       	adc	r31, r19
    20f4:	80 81       	ld	r24, Z
    20f6:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
 * Description :
 * Functional responsible for send array of byte to another UART device.
 */
void UART_sendArrayOfByte(const uint8 *data,uint8 length)
{
	for(uint8 i=0 ; i<length;i++)
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	99 81       	ldd	r25, Y+1	; 0x01
    2102:	8c 81       	ldd	r24, Y+4	; 0x04
    2104:	98 17       	cp	r25, r24
    2106:	70 f3       	brcs	.-36     	; 0x20e4 <UART_sendArrayOfByte+0x16>
	{
		UART_sendByte(data[i]);
	}
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    211e:	eb e2       	ldi	r30, 0x2B	; 43
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	88 23       	and	r24, r24
    2126:	dc f7       	brge	.-10     	; 0x211e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2128:	ec e2       	ldi	r30, 0x2C	; 44
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
}
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <UART_recieveArrayOfByte>:
/*
 * Description :
 * Functional responsible for receive array of bytes from another UART device.
 */
void UART_recieveArrayOfByte(uint8 *data,uint8 length)
{
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <UART_recieveArrayOfByte+0xa>
    213e:	00 d0       	rcall	.+0      	; 0x2140 <UART_recieveArrayOfByte+0xc>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9b 83       	std	Y+3, r25	; 0x03
    2146:	8a 83       	std	Y+2, r24	; 0x02
    2148:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0 ; i<length;i++)
    214a:	19 82       	std	Y+1, r1	; 0x01
    214c:	0f c0       	rjmp	.+30     	; 0x216c <UART_recieveArrayOfByte+0x38>
	{
		data[i]=UART_recieveByte();
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	8c 01       	movw	r16, r24
    215a:	02 0f       	add	r16, r18
    215c:	13 1f       	adc	r17, r19
    215e:	0e 94 8b 10 	call	0x2116	; 0x2116 <UART_recieveByte>
    2162:	f8 01       	movw	r30, r16
    2164:	80 83       	st	Z, r24
 * Description :
 * Functional responsible for receive array of bytes from another UART device.
 */
void UART_recieveArrayOfByte(uint8 *data,uint8 length)
{
	for(uint8 i=0 ; i<length;i++)
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	99 81       	ldd	r25, Y+1	; 0x01
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	98 17       	cp	r25, r24
    2172:	68 f3       	brcs	.-38     	; 0x214e <UART_recieveArrayOfByte+0x1a>
	{
		data[i]=UART_recieveByte();
	}
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	1f 91       	pop	r17
    2182:	0f 91       	pop	r16
    2184:	08 95       	ret

00002186 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <UART_sendString+0x6>
    218c:	0f 92       	push	r0
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	9b 83       	std	Y+3, r25	; 0x03
    2194:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2196:	19 82       	std	Y+1, r1	; 0x01
    2198:	0e c0       	rjmp	.+28     	; 0x21b6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	fc 01       	movw	r30, r24
    21a6:	e2 0f       	add	r30, r18
    21a8:	f3 1f       	adc	r31, r19
    21aa:	80 81       	ld	r24, Z
    21ac:	0e 94 50 10 	call	0x20a0	; 0x20a0 <UART_sendByte>
		i++;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	9b 81       	ldd	r25, Y+3	; 0x03
    21c0:	fc 01       	movw	r30, r24
    21c2:	e2 0f       	add	r30, r18
    21c4:	f3 1f       	adc	r31, r19
    21c6:	80 81       	ld	r24, Z
    21c8:	88 23       	and	r24, r24
    21ca:	39 f7       	brne	.-50     	; 0x219a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <UART_receiveString+0xa>
    21e2:	0f 92       	push	r0
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	9b 83       	std	Y+3, r25	; 0x03
    21ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21ec:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	8c 01       	movw	r16, r24
    21fa:	02 0f       	add	r16, r18
    21fc:	13 1f       	adc	r17, r19
    21fe:	0e 94 8b 10 	call	0x2116	; 0x2116 <UART_recieveByte>
    2202:	f8 01       	movw	r30, r16
    2204:	80 83       	st	Z, r24
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
    2218:	8c 01       	movw	r16, r24
    221a:	02 0f       	add	r16, r18
    221c:	13 1f       	adc	r17, r19
    221e:	0e 94 8b 10 	call	0x2116	; 0x2116 <UART_recieveByte>
    2222:	f8 01       	movw	r30, r16
    2224:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	fc 01       	movw	r30, r24
    2232:	e2 0f       	add	r30, r18
    2234:	f3 1f       	adc	r31, r19
    2236:	80 81       	ld	r24, Z
    2238:	83 32       	cpi	r24, 0x23	; 35
    223a:	31 f7       	brne	.-52     	; 0x2208 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	10 82       	st	Z, r1
}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <__udivmodhi4>:
    225e:	aa 1b       	sub	r26, r26
    2260:	bb 1b       	sub	r27, r27
    2262:	51 e1       	ldi	r21, 0x11	; 17
    2264:	07 c0       	rjmp	.+14     	; 0x2274 <__udivmodhi4_ep>

00002266 <__udivmodhi4_loop>:
    2266:	aa 1f       	adc	r26, r26
    2268:	bb 1f       	adc	r27, r27
    226a:	a6 17       	cp	r26, r22
    226c:	b7 07       	cpc	r27, r23
    226e:	10 f0       	brcs	.+4      	; 0x2274 <__udivmodhi4_ep>
    2270:	a6 1b       	sub	r26, r22
    2272:	b7 0b       	sbc	r27, r23

00002274 <__udivmodhi4_ep>:
    2274:	88 1f       	adc	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	5a 95       	dec	r21
    227a:	a9 f7       	brne	.-22     	; 0x2266 <__udivmodhi4_loop>
    227c:	80 95       	com	r24
    227e:	90 95       	com	r25
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	08 95       	ret

00002286 <__udivmodsi4>:
    2286:	a1 e2       	ldi	r26, 0x21	; 33
    2288:	1a 2e       	mov	r1, r26
    228a:	aa 1b       	sub	r26, r26
    228c:	bb 1b       	sub	r27, r27
    228e:	fd 01       	movw	r30, r26
    2290:	0d c0       	rjmp	.+26     	; 0x22ac <__udivmodsi4_ep>

00002292 <__udivmodsi4_loop>:
    2292:	aa 1f       	adc	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	ee 1f       	adc	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	a2 17       	cp	r26, r18
    229c:	b3 07       	cpc	r27, r19
    229e:	e4 07       	cpc	r30, r20
    22a0:	f5 07       	cpc	r31, r21
    22a2:	20 f0       	brcs	.+8      	; 0x22ac <__udivmodsi4_ep>
    22a4:	a2 1b       	sub	r26, r18
    22a6:	b3 0b       	sbc	r27, r19
    22a8:	e4 0b       	sbc	r30, r20
    22aa:	f5 0b       	sbc	r31, r21

000022ac <__udivmodsi4_ep>:
    22ac:	66 1f       	adc	r22, r22
    22ae:	77 1f       	adc	r23, r23
    22b0:	88 1f       	adc	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	1a 94       	dec	r1
    22b6:	69 f7       	brne	.-38     	; 0x2292 <__udivmodsi4_loop>
    22b8:	60 95       	com	r22
    22ba:	70 95       	com	r23
    22bc:	80 95       	com	r24
    22be:	90 95       	com	r25
    22c0:	9b 01       	movw	r18, r22
    22c2:	ac 01       	movw	r20, r24
    22c4:	bd 01       	movw	r22, r26
    22c6:	cf 01       	movw	r24, r30
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	09 94       	ijmp

00002302 <__epilogue_restores__>:
    2302:	2a 88       	ldd	r2, Y+18	; 0x12
    2304:	39 88       	ldd	r3, Y+17	; 0x11
    2306:	48 88       	ldd	r4, Y+16	; 0x10
    2308:	5f 84       	ldd	r5, Y+15	; 0x0f
    230a:	6e 84       	ldd	r6, Y+14	; 0x0e
    230c:	7d 84       	ldd	r7, Y+13	; 0x0d
    230e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2310:	9b 84       	ldd	r9, Y+11	; 0x0b
    2312:	aa 84       	ldd	r10, Y+10	; 0x0a
    2314:	b9 84       	ldd	r11, Y+9	; 0x09
    2316:	c8 84       	ldd	r12, Y+8	; 0x08
    2318:	df 80       	ldd	r13, Y+7	; 0x07
    231a:	ee 80       	ldd	r14, Y+6	; 0x06
    231c:	fd 80       	ldd	r15, Y+5	; 0x05
    231e:	0c 81       	ldd	r16, Y+4	; 0x04
    2320:	1b 81       	ldd	r17, Y+3	; 0x03
    2322:	aa 81       	ldd	r26, Y+2	; 0x02
    2324:	b9 81       	ldd	r27, Y+1	; 0x01
    2326:	ce 0f       	add	r28, r30
    2328:	d1 1d       	adc	r29, r1
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	ed 01       	movw	r28, r26
    2336:	08 95       	ret

00002338 <_exit>:
    2338:	f8 94       	cli

0000233a <__stop_program>:
    233a:	ff cf       	rjmp	.-2      	; 0x233a <__stop_program>
